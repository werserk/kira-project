name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-root
        poetry install --no-interaction

    - name: Code formatting (black)
      run: |
        poetry run black --check src/ tests/

    - name: Linting (ruff)
      run: |
        poetry run ruff check src/ tests/ --output-format=github

    - name: Type checking (mypy)
      run: |
        poetry run mypy src/kira

    - name: Security check (safety)
      run: |
        poetry run safety check --json

    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ -v --tb=short --cov=src/kira --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ -v --tb=short

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

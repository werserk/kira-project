#!/usr/bin/env python3
"""CLI –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏"""

import sys
from datetime import UTC, datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click
import yaml

from ..core.config import load_config
from ..core.host import create_host_api

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫."""


@cli.command("list")
@click.option("--tag", type=str, help="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É")
@click.option("--limit", type=int, default=50, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫")
@click.option("--sort", type=click.Choice(["created", "updated", "title"]), default="updated", help="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def list_command(tag: str | None, limit: int, sort: str, verbose: bool) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        if not vault_path.exists():
            click.echo(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
            return 1

        notes_dir = vault_path / "notes"
        if not notes_dir.exists():
            click.echo("üìù –ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
            return 0

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏
        notes = load_notes(notes_dir)

        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        if tag:
            notes = [n for n in notes if tag in n.get("tags", [])]

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if sort == "created":
            notes.sort(key=lambda n: n.get("created", ""), reverse=True)
        elif sort == "updated":
            notes.sort(key=lambda n: n.get("updated", n.get("created", "")), reverse=True)
        elif sort == "title":
            notes.sort(key=lambda n: n.get("title", "").lower())

        if not notes:
            click.echo("üìù –ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 0

        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        notes = notes[:limit]

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å
        display_note_list(notes, verbose)

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("show")
@click.argument("note_id")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def show_command(note_id: str, verbose: bool) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        note = find_note_by_id(vault_path, note_id)
        if not note:
            click.echo(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {note_id}")
            return 1

        display_note_details(note, verbose)
        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("add")
@click.argument("title")
@click.option("--tag", multiple=True, help="–¢–µ–≥–∏ (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)")
@click.option("--content", type=str, help="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def add_command(title: str, tag: tuple[str, ...], content: str | None, verbose: bool) -> int:
    """–ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        if not vault_path.exists():
            click.echo(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
            return 1

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        host_api = create_host_api(vault_path)

        entity_data = {
            "title": title,
            "created": datetime.now(UTC).isoformat(),
        }

        if tag:
            entity_data["tags"] = list(tag)

        note_content = f"# {title}\n\n"
        if content:
            note_content += f"{content}\n\n"
        else:
            note_content += "<!-- Add your notes here -->\n\n"

        entity = host_api.create_entity("note", entity_data, content=note_content)

        click.echo(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {entity.id}")
        if verbose:
            click.echo(f"üìÅ –§–∞–π–ª: {entity.path}")
            if tag:
                click.echo(f"üè∑Ô∏è  –¢–µ–≥–∏: {', '.join(tag)}")

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("edit")
@click.argument("note_id")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def edit_command(note_id: str, verbose: bool) -> int:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ $EDITOR."""
    try:
        import os
        import subprocess

        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        note_path = find_note_path(vault_path, note_id)
        if not note_path:
            click.echo(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {note_id}")
            return 1

        # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
        editor = os.environ.get("EDITOR", "nano")

        if verbose:
            click.echo(f"üìù –û—Ç–∫—Ä—ã–≤–∞—é {note_path} –≤ {editor}...")

        # –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
        subprocess.run([editor, str(note_path)])

        click.echo(f"‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {note_id}")
        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("tag")
@click.argument("note_id")
@click.argument("tags", nargs=-1, required=True)
@click.option("--remove", is_flag=True, help="–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏ –≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def tag_command(note_id: str, tags: tuple[str, ...], remove: bool, verbose: bool) -> int:
    """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏ —É –∑–∞–º–µ—Ç–∫–∏."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        note_path = find_note_path(vault_path, note_id)
        if not note_path:
            click.echo(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {note_id}")
            return 1

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        with open(note_path, encoding="utf-8") as f:
            content = f.read()

        parts = content.split("---", 2)
        if len(parts) < 3:
            click.echo("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∑–∞–º–µ—Ç–∫–∏")
            return 1

        metadata = yaml.safe_load(parts[1])
        current_tags = set(metadata.get("tags", []))

        # –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏
        if remove:
            current_tags -= set(tags)
            action = "—É–¥–∞–ª–µ–Ω—ã"
        else:
            current_tags |= set(tags)
            action = "–¥–æ–±–∞–≤–ª–µ–Ω—ã"

        # Use HostAPI for single writer pattern (Phase 0, Point 2)
        entity_id = metadata.get("id")
        if not entity_id:
            click.echo("‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –∏–º–µ–µ—Ç ID")
            return 1

        host_api = create_host_api(vault_path)
        host_api.update_entity(entity_id, {"tags": sorted(current_tags)})

        click.echo(f"‚úÖ –¢–µ–≥–∏ {action}: {', '.join(tags)}")
        if verbose:
            click.echo(f"üìù –í—Å–µ —Ç–µ–≥–∏: {', '.join(sorted(current_tags))}")

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("delete")
@click.argument("note_id")
@click.option("--force", is_flag=True, help="–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def delete_command(note_id: str, force: bool, verbose: bool) -> int:
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        note_path = find_note_path(vault_path, note_id)
        if not note_path:
            click.echo(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {note_id}")
            return 1

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not force and not click.confirm(f"–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É {note_id}?"):
            click.echo("–û—Ç–º–µ–Ω–µ–Ω–æ")
            return 0

        # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
        note_path.unlink()

        click.echo(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {note_id}")
        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


# Helper functions


def load_notes(notes_dir: Path) -> list[dict]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏."""
    notes = []

    for note_file in notes_dir.glob("note-*.md"):
        try:
            with open(note_file, encoding="utf-8") as f:
                content = f.read()

            if not content.startswith("---"):
                continue

            parts = content.split("---", 2)
            if len(parts) < 3:
                continue

            metadata = yaml.safe_load(parts[1])
            metadata["_path"] = note_file
            metadata["_body"] = parts[2].strip()

            notes.append(metadata)

        except Exception:
            continue

    return notes


def display_note_list(notes: list[dict], verbose: bool) -> None:
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫."""
    click.echo(f"üìù –ó–∞–º–µ—Ç–∫–∏ ({len(notes)}):\n")

    for note in notes:
        title = note.get("title", "Untitled")
        note_id = note.get("id", "unknown")
        tags = note.get("tags", [])
        updated = note.get("updated", note.get("created", ""))

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
        if updated:
            try:
                dt = datetime.fromisoformat(updated.replace("Z", "+00:00"))
                date_str = dt.strftime("%Y-%m-%d")
            except Exception:
                date_str = updated[:10] if len(updated) >= 10 else ""
        else:
            date_str = ""

        # –¢–µ–≥–∏
        tags_str = ""
        if tags:
            tags_str = " " + " ".join([f"#{t}" for t in tags])

        click.echo(f"  üìÑ {title} ({date_str}){tags_str}")

        if verbose:
            click.echo(f"      ID: {note_id}")
            click.echo(f"      –§–∞–π–ª: {note.get('_path')}")


def display_note_details(note: dict, verbose: bool) -> None:
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ç–∫–∏."""
    click.echo(f"\nüìù {note.get('title', 'Untitled')}\n")
    click.echo(f"ID: {note.get('id')}")

    if note.get("tags"):
        click.echo(f"–¢–µ–≥–∏: {', '.join(note.get('tags', []))}")

    if note.get("created"):
        click.echo(f"–°–æ–∑–¥–∞–Ω–æ: {note.get('created')}")

    if note.get("updated"):
        click.echo(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {note.get('updated')}")

    # –ö–æ–Ω—Ç–µ–Ω—Ç
    body = note.get("_body", "")
    if body:
        click.echo(f"\n{body}")

    if verbose:
        click.echo(f"\n–§–∞–π–ª: {note.get('_path')}")


def find_note_by_id(vault_path: Path, note_id: str) -> dict | None:
    """–ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ ID."""
    notes_dir = vault_path / "notes"
    if not notes_dir.exists():
        return None

    notes = load_notes(notes_dir)
    for note in notes:
        if note.get("id") == note_id or note.get("id", "").startswith(note_id):
            return note

    return None


def find_note_path(vault_path: Path, note_id: str) -> Path | None:
    """–ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–º–µ—Ç–∫–∏."""
    note = find_note_by_id(vault_path, note_id)
    if note:
        return note.get("_path")
    return None


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":
    sys.exit(main())

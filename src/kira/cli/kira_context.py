#!/usr/bin/env python3
"""CLI –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ (GTD)"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click
import yaml

from ..core.config import load_config
from ..core.host import create_host_api

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∑–∞–¥–∞—á (GTD)",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤."""


@cli.command("list")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def list_command(verbose: bool) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        if not vault_path.exists():
            click.echo(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
            return 1

        # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏–∑ –∑–∞–¥–∞—á
        contexts = collect_contexts(vault_path)

        if not contexts:
            click.echo("üè∑Ô∏è  –ö–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            click.echo("\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ –∑–∞–¥–∞—á–∞–º —á–µ—Ä–µ–∑ —Ç–µ–≥–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å @")
            click.echo("–ù–∞–ø—Ä–∏–º–µ—Ä: @home, @office, @phone, @computer")
            return 0

        click.echo(f"üè∑Ô∏è  –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã ({len(contexts)}):\n")

        # –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á
        sorted_contexts = sorted(contexts.items(), key=lambda x: x[1], reverse=True)

        for context, count in sorted_contexts:
            click.echo(f"  @{context}: {count} –∑–∞–¥–∞—á(–∏)")

        if verbose:
            click.echo("\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            click.echo("  kira task list --tag @home")
            click.echo("  kira context show @office")

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("show")
@click.argument("context")
@click.option("--status", type=click.Choice(["todo", "doing", "all"]), default="all", help="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def show_command(context: str, status: str, verbose: bool) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        if not vault_path.exists():
            click.echo(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
            return 1

        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (—É–±—Ä–∞—Ç—å @ –µ—Å–ª–∏ –µ—Å—Ç—å)
        context_name = context.lstrip("@")

        # –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        tasks = find_tasks_by_context(vault_path, context_name, status)

        if not tasks:
            click.echo(f"üìã –ó–∞–¥–∞—á –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ @{context_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0

        click.echo(f"\nüìã –ó–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ @{context_name} ({len(tasks)}):\n")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É
        by_status = {}
        for task in tasks:
            task_status = task.get("status", "todo")
            if task_status not in by_status:
                by_status[task_status] = []
            by_status[task_status].append(task)

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å
        status_order = ["doing", "todo", "review", "blocked", "done"]
        status_icons = {
            "todo": "‚è≥",
            "doing": "üîÑ",
            "review": "üëÄ",
            "done": "‚úÖ",
            "blocked": "üö´",
        }

        for task_status in status_order:
            if task_status in by_status:
                tasks_list = by_status[task_status]
                click.echo(f"{status_icons.get(task_status, '‚ùì')} {task_status.upper()} ({len(tasks_list)}):")
                for task in tasks_list:
                    title = task.get("title", "Untitled")
                    click.echo(f"  ‚Ä¢ {title}")
                    if verbose:
                        task_id = task.get("id", "unknown")
                        click.echo(f"     ID: {task_id}")
                        due = task.get("due")
                        if due:
                            click.echo(f"     –î–µ–¥–ª–∞–π–Ω: {due}")
                click.echo()

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("add")
@click.argument("task_id")
@click.argument("context")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def add_command(task_id: str, context: str, verbose: bool) -> int:
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ –∑–∞–¥–∞—á–µ."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        # –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É
        task_path = find_task_path(vault_path, task_id)
        if not task_path:
            click.echo(f"‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {task_id}")
            return 1

        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–æ–±–∞–≤–∏—Ç—å @ –µ—Å–ª–∏ –Ω–µ—Ç)
        context_name = context if context.startswith("@") else f"@{context}"

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        with open(task_path, encoding="utf-8") as f:
            content = f.read()

        parts = content.split("---", 2)
        if len(parts) < 3:
            click.echo("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á–∏")
            return 1

        metadata = yaml.safe_load(parts[1])
        current_tags = set(metadata.get("tags", []))

        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        current_tags.add(context_name)

        # Use HostAPI for single writer pattern (Phase 0, Point 2)
        entity_id = metadata.get("id")
        if not entity_id:
            click.echo("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –∏–º–µ–µ—Ç ID")
            return 1

        host_api = create_host_api(vault_path)
        host_api.update_entity(entity_id, {"tags": sorted(current_tags)})

        click.echo(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç {context_name} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–¥–∞—á–µ {task_id}")

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("remove")
@click.argument("task_id")
@click.argument("context")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def remove_command(task_id: str, context: str, verbose: bool) -> int:
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —É –∑–∞–¥–∞—á–∏."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        # –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á—É
        task_path = find_task_path(vault_path, task_id)
        if not task_path:
            click.echo(f"‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {task_id}")
            return 1

        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_name = context if context.startswith("@") else f"@{context}"

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        with open(task_path, encoding="utf-8") as f:
            content = f.read()

        parts = content.split("---", 2)
        if len(parts) < 3:
            click.echo("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∑–∞–¥–∞—á–∏")
            return 1

        metadata = yaml.safe_load(parts[1])
        current_tags = set(metadata.get("tags", []))

        # –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if context_name in current_tags:
            current_tags.remove(context_name)

            # Use HostAPI for single writer pattern (Phase 0, Point 2)
            entity_id = metadata.get("id")
            if not entity_id:
                click.echo("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –∏–º–µ–µ—Ç ID")
                return 1

            host_api = create_host_api(vault_path)
            host_api.update_entity(entity_id, {"tags": sorted(current_tags)})

            click.echo(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç {context_name} —É–¥–∞–ª–µ–Ω —É –∑–∞–¥–∞—á–∏ {task_id}")
        else:
            click.echo(f"‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–∫—Å—Ç {context_name} –Ω–µ –Ω–∞–π–¥–µ–Ω —É –∑–∞–¥–∞—á–∏")

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


# Helper functions


def collect_contexts(vault_path: Path) -> dict[str, int]:
    """–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏ –∏—Ö —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    contexts = {}
    tasks_dir = vault_path / "tasks"

    if not tasks_dir.exists():
        return contexts

    for task_file in tasks_dir.glob("task-*.md"):
        try:
            with open(task_file, encoding="utf-8") as f:
                content = f.read()

            if not content.startswith("---"):
                continue

            parts = content.split("---", 2)
            if len(parts) < 3:
                continue

            metadata = yaml.safe_load(parts[1])
            tags = metadata.get("tags", [])

            # –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã - —ç—Ç–æ —Ç–µ–≥–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å @
            for tag in tags:
                if tag.startswith("@"):
                    context_name = tag.lstrip("@")
                    contexts[context_name] = contexts.get(context_name, 0) + 1

        except Exception:
            continue

    return contexts


def find_tasks_by_context(vault_path: Path, context: str, status_filter: str) -> list[dict]:
    """–ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
    tasks = []
    tasks_dir = vault_path / "tasks"

    if not tasks_dir.exists():
        return tasks

    context_tag = f"@{context}"

    for task_file in tasks_dir.glob("task-*.md"):
        try:
            with open(task_file, encoding="utf-8") as f:
                content = f.read()

            if not content.startswith("---"):
                continue

            parts = content.split("---", 2)
            if len(parts) < 3:
                continue

            metadata = yaml.safe_load(parts[1])
            tags = metadata.get("tags", [])
            task_status = metadata.get("status", "todo")

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if context_tag in tags:
                # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
                if status_filter == "all" or task_status == status_filter:
                    tasks.append(metadata)

        except Exception:
            continue

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: doing –ø–µ—Ä–≤—ã–º–∏
    def sort_key(task):
        status = task.get("status", "todo")
        status_order = {"doing": 0, "todo": 1, "review": 2, "blocked": 3, "done": 4}
        return status_order.get(status, 5)

    tasks.sort(key=sort_key)
    return tasks


def find_task_path(vault_path: Path, task_id: str) -> Path | None:
    """–ù–∞–π—Ç–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–¥–∞—á–∏."""
    tasks_dir = vault_path / "tasks"
    if not tasks_dir.exists():
        return None

    for task_file in tasks_dir.glob("task-*.md"):
        try:
            with open(task_file, encoding="utf-8") as f:
                content = f.read()

            if not content.startswith("---"):
                continue

            parts = content.split("---", 2)
            if len(parts) < 3:
                continue

            metadata = yaml.safe_load(parts[1])
            if metadata.get("id") == task_id or metadata.get("id", "").startswith(task_id):
                return task_file

        except Exception:
            continue

    return None


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":
    sys.exit(main())

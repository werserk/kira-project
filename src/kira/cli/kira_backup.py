#!/usr/bin/env python3
"""CLI –º–æ–¥—É–ª—å –¥–ª—è –±—ç–∫–∞–ø–æ–≤ Vault"""

import shutil
import sys
from datetime import datetime, timezone
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

from ..core.config import load_config

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏ Vault",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ç–∫–∞–ø–æ–≤."""


@cli.command("create")
@click.option("--name", type=str, help="–ò–º—è –±—ç–∫–∞–ø–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: timestamp)")
@click.option("--destination", type=str, help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±—ç–∫–∞–ø–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .backups)")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def create_command(name: str | None, destination: str | None, verbose: bool) -> int:
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø Vault."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        if not vault_path.exists():
            click.echo(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
            return 1

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–æ–≤
        if destination:
            backup_root = Path(destination)
        else:
            backup_root = vault_path.parent / ".backups"

        backup_root.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞—Ç—å –∏–º—è –±—ç–∫–∞–ø–∞
        if not name:
            timestamp = datetime.now(timezone.utc).strftime("%Y%m%d-%H%M%S")
            name = f"vault-backup-{timestamp}"

        backup_path = backup_root / name

        if backup_path.exists():
            click.echo(f"‚ùå –ë—ç–∫–∞–ø —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {backup_path}")
            return 1

        click.echo(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: {name}")

        if verbose:
            click.echo(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {vault_path}")
            click.echo(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {backup_path}")

        # –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
        shutil.copytree(vault_path, backup_path, symlinks=False)

        # –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        metadata = {
            "created": datetime.now(timezone.utc).isoformat(),
            "source": str(vault_path),
            "name": name,
        }

        metadata_file = backup_path / ".backup-info.txt"
        with open(metadata_file, "w", encoding="utf-8") as f:
            f.write(f"Backup created: {metadata['created']}\n")
            f.write(f"Source: {metadata['source']}\n")
            f.write(f"Name: {metadata['name']}\n")

        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä
        total_size = sum(f.stat().st_size for f in backup_path.rglob("*") if f.is_file())
        size_mb = total_size / (1024 * 1024)

        click.echo(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        click.echo(f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")

        if verbose:
            file_count = sum(1 for _ in backup_path.rglob("*") if _.is_file())
            click.echo(f"üìÅ –§–∞–π–ª–æ–≤: {file_count}")

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("list")
@click.option("--destination", type=str, help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .backups)")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def list_command(destination: str | None, verbose: bool) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–æ–≤
        if destination:
            backup_root = Path(destination)
        else:
            backup_root = vault_path.parent / ".backups"

        if not backup_root.exists():
            click.echo("üíæ –ë—ç–∫–∞–ø–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return 0

        # –ù–∞–π—Ç–∏ –≤—Å–µ –±—ç–∫–∞–ø—ã
        backups = []
        for backup_dir in backup_root.iterdir():
            if backup_dir.is_dir():
                # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
                info = get_backup_info(backup_dir)
                backups.append(info)

        if not backups:
            click.echo("üíæ –ë—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        backups.sort(key=lambda x: x["created"], reverse=True)

        click.echo(f"üíæ –ë—ç–∫–∞–ø—ã ({len(backups)}):\n")

        for backup in backups:
            name = backup["name"]
            created = backup["created"]
            size_mb = backup["size_mb"]

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
            try:
                dt = datetime.fromisoformat(created.replace("Z", "+00:00"))
                date_str = dt.strftime("%Y-%m-%d %H:%M")
            except Exception:
                date_str = created

            click.echo(f"  üì¶ {name}")
            click.echo(f"     –°–æ–∑–¥–∞–Ω: {date_str}")
            click.echo(f"     –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")

            if verbose:
                click.echo(f"     –ü—É—Ç—å: {backup['path']}")

            click.echo()

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("restore")
@click.argument("backup_name")
@click.option("--destination", type=str, help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .backups)")
@click.option("--force", is_flag=True, help="–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Vault –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def restore_command(backup_name: str, destination: str | None, force: bool, verbose: bool) -> int:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Vault –∏–∑ –±—ç–∫–∞–ø–∞."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–æ–≤
        if destination:
            backup_root = Path(destination)
        else:
            backup_root = vault_path.parent / ".backups"

        backup_path = backup_root / backup_name

        if not backup_path.exists():
            click.echo(f"‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_name}")
            return 1

        click.echo(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: {backup_name}")

        if verbose:
            click.echo(f"   –ë—ç–∫–∞–ø: {backup_path}")
            click.echo(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {vault_path}")

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π Vault
        if vault_path.exists():
            if not force:
                click.echo("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—É—â–∏–π Vault –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω!")
                if not click.confirm("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
                    click.echo("–û—Ç–º–µ–Ω–µ–Ω–æ")
                    return 0

            # –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ Vault
            temp_backup_name = f"vault-before-restore-{datetime.now(timezone.utc).strftime('%Y%m%d-%H%M%S')}"
            temp_backup_path = backup_root / temp_backup_name

            click.echo(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ Vault: {temp_backup_name}")
            shutil.copytree(vault_path, temp_backup_path, symlinks=False)

            # –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π Vault
            shutil.rmtree(vault_path)

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞
        shutil.copytree(backup_path, vault_path, symlinks=False)

        # –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±—ç–∫–∞–ø–∞ –∏–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Vault
        backup_info = vault_path / ".backup-info.txt"
        if backup_info.exists():
            backup_info.unlink()

        click.echo(f"‚úÖ Vault –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –±—ç–∫–∞–ø–∞: {backup_name}")

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("delete")
@click.argument("backup_name")
@click.option("--destination", type=str, help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –±—ç–∫–∞–ø–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .backups)")
@click.option("--force", is_flag=True, help="–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def delete_command(backup_name: str, destination: str | None, force: bool, verbose: bool) -> int:
    """–£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–æ–≤
        if destination:
            backup_root = Path(destination)
        else:
            backup_root = vault_path.parent / ".backups"

        backup_path = backup_root / backup_name

        if not backup_path.exists():
            click.echo(f"‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_name}")
            return 1

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not force:
            if not click.confirm(f"–£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø {backup_name}?"):
                click.echo("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return 0

        # –£–¥–∞–ª–∏—Ç—å
        shutil.rmtree(backup_path)

        click.echo(f"‚úÖ –ë—ç–∫–∞–ø —É–¥–∞–ª–µ–Ω: {backup_name}")
        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


# Helper functions


def get_backup_info(backup_path: Path) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ."""
    info = {
        "name": backup_path.name,
        "path": str(backup_path),
        "created": "",
        "size_mb": 0.0,
    }

    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    metadata_file = backup_path / ".backup-info.txt"
    if metadata_file.exists():
        try:
            with open(metadata_file, encoding="utf-8") as f:
                for line in f:
                    if line.startswith("Backup created:"):
                        info["created"] = line.split(":", 1)[1].strip()
        except Exception:
            pass

    # –ï—Å–ª–∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not info["created"]:
        mtime = backup_path.stat().st_mtime
        info["created"] = datetime.fromtimestamp(mtime, tz=timezone.utc).isoformat()

    # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä
    total_size = sum(f.stat().st_size for f in backup_path.rglob("*") if f.is_file())
    info["size_mb"] = total_size / (1024 * 1024)

    return info


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":
    sys.exit(main())

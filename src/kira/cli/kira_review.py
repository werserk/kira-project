#!/usr/bin/env python3
"""CLI –º–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–∑–æ—Ä–æ–≤ (review)"""

import sys
from datetime import datetime, timedelta, timezone
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click
import yaml

from ..core.config import load_config

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–∑–æ—Ä—ã –∑–∞–¥–∞—á –∏ —Å–æ–±—ã—Ç–∏–π",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è review."""


@cli.command("weekly")
@click.option("--save", type=str, help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–∑–æ—Ä –≤ —Ñ–∞–π–ª")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def weekly_command(save: str | None, verbose: bool) -> int:
    """–ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        if not vault_path.exists():
            click.echo(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
            return 1

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è)
        now = datetime.now(timezone.utc)
        week_ago = now - timedelta(days=7)

        click.echo("\nüìä –ù–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä")
        click.echo(f"–ü–µ—Ä–∏–æ–¥: {week_ago.strftime('%Y-%m-%d')} - {now.strftime('%Y-%m-%d')}\n")
        click.echo("=" * 60)

        # –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        review_data = collect_review_data(vault_path, week_ago, now)

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±–∑–æ—Ä
        display_weekly_review(review_data, verbose)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
        if save:
            save_review_to_file(review_data, Path(save), "weekly")
            click.echo(f"\n‚úÖ –û–±–∑–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save}")

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback
            traceback.print_exc()
        return 1


@cli.command("monthly")
@click.option("--save", type=str, help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–∑–æ—Ä –≤ —Ñ–∞–π–ª")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def monthly_command(save: str | None, verbose: bool) -> int:
    """–ú–µ—Å—è—á–Ω—ã–π –æ–±–∑–æ—Ä."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        if not vault_path.exists():
            click.echo(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
            return 1

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü)
        now = datetime.now(timezone.utc)
        month_ago = now - timedelta(days=30)

        click.echo("\nüìä –ú–µ—Å—è—á–Ω—ã–π –æ–±–∑–æ—Ä")
        click.echo(f"–ü–µ—Ä–∏–æ–¥: {month_ago.strftime('%Y-%m-%d')} - {now.strftime('%Y-%m-%d')}\n")
        click.echo("=" * 60)

        # –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        review_data = collect_review_data(vault_path, month_ago, now)

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±–∑–æ—Ä
        display_monthly_review(review_data, verbose)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
        if save:
            save_review_to_file(review_data, Path(save), "monthly")
            click.echo(f"\n‚úÖ –û–±–∑–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save}")

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback
            traceback.print_exc()
        return 1


@cli.command("pending")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def pending_command(verbose: bool) -> int:
    """–û–±–∑–æ—Ä –∑–∞–¥–∞—á, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        if not vault_path.exists():
            click.echo(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
            return 1

        click.echo("\n‚ö†Ô∏è  –ó–∞–¥–∞—á–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è\n")
        click.echo("=" * 60)

        tasks_dir = vault_path / "tasks"
        if not tasks_dir.exists():
            click.echo("üìã –ó–∞–¥–∞—á –Ω–µ—Ç")
            return 0

        now = datetime.now(timezone.utc)

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á
        overdue = []
        due_soon = []
        blocked = []
        long_todo = []
        long_doing = []

        for task_file in tasks_dir.glob("task-*.md"):
            try:
                metadata = load_metadata(task_file)
                status = metadata.get("status", "todo")
                created = parse_date(metadata.get("created"))
                due = parse_date(metadata.get("due"))

                # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                if due and status not in ["done"] and due < now:
                    overdue.append(metadata)

                # –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—â–∏–µ (–≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π)
                elif due and status not in ["done"] and due < now + timedelta(days=3):
                    due_soon.append(metadata)

                # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                if status == "blocked":
                    blocked.append(metadata)

                # –î–æ–ª–≥–æ –≤ todo (–±–æ–ª—å—à–µ 30 –¥–Ω–µ–π)
                if status == "todo" and created:
                    days_old = (now - created).days
                    if days_old > 30:
                        long_todo.append((metadata, days_old))

                # –î–æ–ª–≥–æ –≤ doing (–±–æ–ª—å—à–µ 7 –¥–Ω–µ–π)
                if status == "doing" and created:
                    days_old = (now - created).days
                    if days_old > 7:
                        long_doing.append((metadata, days_old))

            except Exception:
                continue

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å
        total_issues = len(overdue) + len(due_soon) + len(blocked) + len(long_todo) + len(long_doing)

        if total_issues == 0:
            click.echo("‚úÖ –ù–µ—Ç –∑–∞–¥–∞—á, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è")
            return 0

        click.echo(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}\n")

        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
        if overdue:
            click.echo(f"üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(overdue)}):")
            for task in overdue:
                title = task.get("title", "Untitled")
                due_date = parse_date(task.get("due"))
                days_overdue = (now - due_date).days if due_date else 0
                click.echo(f"  ‚Ä¢ {title} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {days_overdue} –¥–Ω.)")
                if verbose:
                    click.echo(f"     ID: {task.get('id')}")
            click.echo()

        # –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—â–∏–µ
        if due_soon:
            click.echo(f"üü° –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç ({len(due_soon)}):")
            for task in due_soon:
                title = task.get("title", "Untitled")
                due_date = parse_date(task.get("due"))
                days_left = (due_date - now).days if due_date else 0
                click.echo(f"  ‚Ä¢ {title} (—á–µ—Ä–µ–∑ {days_left} –¥–Ω.)")
                if verbose:
                    click.echo(f"     ID: {task.get('id')}")
            click.echo()

        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        if blocked:
            click.echo(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ({len(blocked)}):")
            for task in blocked:
                title = task.get("title", "Untitled")
                click.echo(f"  ‚Ä¢ {title}")
                if verbose:
                    click.echo(f"     ID: {task.get('id')}")
            click.echo()

        # –î–æ–ª–≥–æ –≤ todo
        if long_todo:
            click.echo(f"‚è∞ –î–∞–≤–Ω–æ –≤ –æ—á–µ—Ä–µ–¥–∏ ({len(long_todo)}):")
            for task, days in sorted(long_todo, key=lambda x: x[1], reverse=True)[:10]:
                title = task.get("title", "Untitled")
                click.echo(f"  ‚Ä¢ {title} ({days} –¥–Ω. –≤ todo)")
                if verbose:
                    click.echo(f"     ID: {task.get('id')}")
            click.echo()

        # –î–æ–ª–≥–æ –≤ doing
        if long_doing:
            click.echo(f"üîÑ –î–∞–≤–Ω–æ –≤ —Ä–∞–±–æ—Ç–µ ({len(long_doing)}):")
            for task, days in sorted(long_doing, key=lambda x: x[1], reverse=True):
                title = task.get("title", "Untitled")
                click.echo(f"  ‚Ä¢ {title} ({days} –¥–Ω. –≤ doing)")
                if verbose:
                    click.echo(f"     ID: {task.get('id')}")
            click.echo()

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback
            traceback.print_exc()
        return 1


# Helper functions

def collect_review_data(vault_path: Path, start_date: datetime, end_date: datetime) -> dict:
    """–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–∑–æ—Ä–∞."""
    data = {
        "period_start": start_date,
        "period_end": end_date,
        "tasks": {
            "created": [],
            "completed": [],
            "in_progress": [],
        },
        "notes": {
            "created": [],
        },
        "events": {
            "attended": [],
        },
    }

    # –ó–∞–¥–∞—á–∏
    tasks_dir = vault_path / "tasks"
    if tasks_dir.exists():
        for task_file in tasks_dir.glob("task-*.md"):
            try:
                metadata = load_metadata(task_file)
                created = parse_date(metadata.get("created"))
                
                if created and start_date <= created <= end_date:
                    data["tasks"]["created"].append(metadata)
                
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
                if metadata.get("status") == "done":
                    updated = parse_date(metadata.get("updated"))
                    if updated and start_date <= updated <= end_date:
                        data["tasks"]["completed"].append(metadata)
                
                # –í —Ä–∞–±–æ—Ç–µ
                if metadata.get("status") == "doing":
                    data["tasks"]["in_progress"].append(metadata)

            except Exception:
                continue

    # –ó–∞–º–µ—Ç–∫–∏
    notes_dir = vault_path / "notes"
    if notes_dir.exists():
        for note_file in notes_dir.glob("note-*.md"):
            try:
                metadata = load_metadata(note_file)
                created = parse_date(metadata.get("created"))
                
                if created and start_date <= created <= end_date:
                    data["notes"]["created"].append(metadata)

            except Exception:
                continue

    # –°–æ–±—ã—Ç–∏—è
    events_dir = vault_path / "events"
    if events_dir.exists():
        for event_file in events_dir.glob("event-*.md"):
            try:
                metadata = load_metadata(event_file)
                start = parse_date(metadata.get("start"))
                
                if start and start_date <= start <= end_date:
                    data["events"]["attended"].append(metadata)

            except Exception:
                continue

    return data


def display_weekly_review(data: dict, verbose: bool) -> None:
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä."""
    click.echo(f"\nüìã –ó–∞–¥–∞—á–∏:")
    click.echo(f"  –°–æ–∑–¥–∞–Ω–æ: {len(data['tasks']['created'])}")
    click.echo(f"  ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(data['tasks']['completed'])}")
    click.echo(f"  üîÑ –í —Ä–∞–±–æ—Ç–µ: {len(data['tasks']['in_progress'])}")

    if data['tasks']['completed'] and verbose:
        click.echo(f"\n  –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
        for task in data['tasks']['completed'][:10]:
            click.echo(f"    ‚Ä¢ {task.get('title', 'Untitled')}")

    click.echo(f"\nüìù –ó–∞–º–µ—Ç–∫–∏:")
    click.echo(f"  –°–æ–∑–¥–∞–Ω–æ: {len(data['notes']['created'])}")

    click.echo(f"\nüìÜ –°–æ–±—ã—Ç–∏—è:")
    click.echo(f"  –ü–æ—Å–µ—â–µ–Ω–æ: {len(data['events']['attended'])}")

    # Completion rate
    created = len(data['tasks']['created'])
    completed = len(data['tasks']['completed'])
    if created > 0:
        rate = (completed / created) * 100
        click.echo(f"\nüéØ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {rate:.1f}%")

    click.echo("\n" + "=" * 60)


def display_monthly_review(data: dict, verbose: bool) -> None:
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –æ–±–∑–æ—Ä."""
    display_weekly_review(data, verbose)  # Same structure for now


def save_review_to_file(data: dict, file_path: Path, review_type: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–∑–æ—Ä –≤ markdown —Ñ–∞–π–ª."""
    lines = []
    
    lines.append(f"# {review_type.title()} Review")
    lines.append(f"\n–ü–µ—Ä–∏–æ–¥: {data['period_start'].strftime('%Y-%m-%d')} - {data['period_end'].strftime('%Y-%m-%d')}\n")
    
    lines.append("## –ó–∞–¥–∞—á–∏\n")
    lines.append(f"- –°–æ–∑–¥–∞–Ω–æ: {len(data['tasks']['created'])}")
    lines.append(f"- –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(data['tasks']['completed'])}")
    lines.append(f"- –í —Ä–∞–±–æ—Ç–µ: {len(data['tasks']['in_progress'])}\n")
    
    if data['tasks']['completed']:
        lines.append("### –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n")
        for task in data['tasks']['completed']:
            lines.append(f"- [x] {task.get('title', 'Untitled')}")
        lines.append("")
    
    lines.append("## –ó–∞–º–µ—Ç–∫–∏\n")
    lines.append(f"- –°–æ–∑–¥–∞–Ω–æ: {len(data['notes']['created'])}\n")
    
    lines.append("## –°–æ–±—ã—Ç–∏—è\n")
    lines.append(f"- –ü–æ—Å–µ—â–µ–Ω–æ: {len(data['events']['attended'])}\n")
    
    file_path.write_text("\n".join(lines), encoding="utf-8")


def load_metadata(file_path: Path) -> dict:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞."""
    with open(file_path, encoding="utf-8") as f:
        content = f.read()

    if not content.startswith("---"):
        return {}

    parts = content.split("---", 2)
    if len(parts) < 3:
        return {}

    return yaml.safe_load(parts[1]) or {}


def parse_date(date_str: str | None) -> datetime | None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
    if not date_str:
        return None
    try:
        return datetime.fromisoformat(date_str.replace("Z", "+00:00"))
    except Exception:
        return None


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":
    sys.exit(main())


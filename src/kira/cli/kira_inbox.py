#!/usr/bin/env python3
"""CLI –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å inbox-–∫–æ–Ω–≤–µ–π–µ—Ä–æ–º"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

from ..core.config import load_config
from ..pipelines.inbox_pipeline import InboxPipeline
from ..registry import get_plugin_registry

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.command(
    context_settings=CONTEXT_SETTINGS,
    help="–ó–∞–ø—É—Å—Ç–∏—Ç—å inbox-–∫–æ–Ω–≤–µ–π–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
)
@click.option(
    "--dry-run",
    is_flag=True,
    help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
)
@click.option(
    "--verbose",
    "-v",
    is_flag=True,
    help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥",
)
@click.option(
    "--config",
    type=str,
    help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: kira.yaml)",
)
def cli(dry_run: bool, verbose: bool, config: str | None) -> int:
    """–ó–∞–ø—É—Å–∫ inbox-–∫–æ–Ω–≤–µ–π–µ—Ä–∞."""

    try:
        loaded_config = load_config(config)

        if verbose:
            click.echo("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            click.echo(f"   Vault: {loaded_config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        plugin_registry = get_plugin_registry()
        if not plugin_registry.is_plugin_enabled("kira-inbox"):
            click.echo("‚ùå –ü–ª–∞–≥–∏–Ω kira-inbox –Ω–µ –≤–∫–ª—é—á–µ–Ω")
            return 1

        if verbose:
            click.echo("‚úÖ –ü–ª–∞–≥–∏–Ω kira-inbox –≤–∫–ª—é—á–µ–Ω")

        pipeline = InboxPipeline(loaded_config)

        if dry_run:
            click.echo("üîç –†–µ–∂–∏–º dry-run: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            items = pipeline.scan_inbox_items()
            click.echo(f"   –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(items)}")

            for item in items[:5]:
                click.echo(f"   - {item}")

            if len(items) > 5:
                click.echo(f"   ... –∏ –µ—â–µ {len(items) - 5} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

            return 0

        click.echo("üöÄ –ó–∞–ø—É—Å–∫ inbox-–∫–æ–Ω–≤–µ–π–µ—Ä–∞...")

        if verbose:
            click.echo("   –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ inbox...")

        processed_count = pipeline.run()

        click.echo(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {processed_count}")

        if verbose:
            click.echo("   –ö–æ–Ω–≤–µ–π–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        return 0
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –∑–∞—â–∏—â–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è inbox-–∫–æ–Ω–≤–µ–π–µ—Ä–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:  # pragma: no cover - click –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":  # pragma: no cover - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–æ–¥—É–ª—å
    sys.exit(main())

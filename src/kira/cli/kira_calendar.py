#!/usr/bin/env python3
"""
CLI –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
"""
import argparse
import sys
from pathlib import Path
from typing import List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from ..adapters.gcal.adapter import GCalAdapter
from ..core.config import load_config
from ..registry import get_adapter_registry


def create_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è calendar –∫–æ–º–∞–Ω–¥—ã"""
    parser = argparse.ArgumentParser(
        prog="kira calendar",
        description="–†–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)"
    )

    subparsers = parser.add_subparsers(
        dest='action',
        help='–î–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º',
        required=True
    )

    # –ö–æ–º–∞–Ω–¥–∞ pull
    pull_parser = subparsers.add_parser(
        'pull',
        help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)'
    )
    pull_parser.add_argument(
        '--calendar',
        type=str,
        help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Å–µ)'
    )
    pull_parser.add_argument(
        '--days',
        type=int,
        default=30,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)'
    )
    pull_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    # –ö–æ–º–∞–Ω–¥–∞ push
    push_parser = subparsers.add_parser(
        'push',
        help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)'
    )
    push_parser.add_argument(
        '--calendar',
        type=str,
        help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Å–µ)'
    )
    push_parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    )
    push_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    return parser


def main(args: Optional[List[str]] = None) -> int:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è calendar CLI

    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ sys.argv)

    Returns:
        –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
    """
    if args is None:
        args = sys.argv[1:]

    parser = create_parser()
    parsed_args = parser.parse_args(args)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()

        if parsed_args.verbose:
            print("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            print(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gcal –∞–¥–∞–ø—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω
        adapter_registry = get_adapter_registry()
        if not adapter_registry.is_adapter_enabled('kira-gcal'):
            print("‚ùå –ê–¥–∞–ø—Ç–µ—Ä kira-gcal –Ω–µ –≤–∫–ª—é—á–µ–Ω")
            return 1

        if parsed_args.verbose:
            print("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä kira-gcal –≤–∫–ª—é—á–µ–Ω")

        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter = GCalAdapter(config)

        if parsed_args.action == 'pull':
            return handle_pull(adapter, parsed_args, config)
        elif parsed_args.action == 'push':
            return handle_push(adapter, parsed_args, config)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {parsed_args.action}")
            return 1

    except FileNotFoundError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è calendar –∫–æ–º–∞–Ω–¥—ã: {e}")
        if parsed_args.verbose:
            import traceback
            traceback.print_exc()
        return 1


def handle_pull(adapter: GCalAdapter, args, config) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã pull"""
    print(f"üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (pull) –Ω–∞ {args.days} –¥–Ω–µ–π...")

    if args.verbose:
        calendars = config.get('adapters', {}).get('gcal', {}).get('calendars', {})
        if args.calendar:
            print(f"   –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {args.calendar}")
        else:
            print(f"   –ö–∞–ª–µ–Ω–¥–∞—Ä–∏: {list(calendars.keys())}")

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º pull
        result = adapter.pull(
            calendar_id=args.calendar,
            days=args.days
        )

        if args.verbose:
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {result.get('events_count', 0)}")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('processed_count', 0)}")

        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return 1


def handle_push(adapter: GCalAdapter, args, config) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã push"""
    if args.dry_run:
        print("üîç –†–µ–∂–∏–º dry-run: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print("üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (push)...")

    if args.verbose:
        calendars = config.get('adapters', {}).get('gcal', {}).get('calendars', {})
        if args.calendar:
            print(f"   –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {args.calendar}")
        else:
            print(f"   –ö–∞–ª–µ–Ω–¥–∞—Ä–∏: {list(calendars.keys())}")

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º push
        result = adapter.push(
            calendar_id=args.calendar,
            dry_run=args.dry_run
        )

        if args.verbose:
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('events_count', 0)}")
            if not args.dry_run:
                print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('sent_count', 0)}")

        if args.dry_run:
            print("‚úÖ Dry-run –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())

#!/usr/bin/env python3
"""CLI –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º"""

import sys
from pathlib import Path
from typing import List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

from ..adapters.gcal.adapter import GCalAdapter
from ..core.config import load_config
from ..registry import get_adapter_registry

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–†–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""


@cli.command("pull")
@click.option(
    "--calendar",
    type=str,
    help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Å–µ)",
)
@click.option(
    "--days",
    type=int,
    default=30,
    show_default=True,
    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
)
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def pull_command(calendar: str | None, days: int, verbose: bool) -> int:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)."""

    try:
        config = load_config()

        if verbose:
            click.echo("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            click.echo(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        adapter_registry = get_adapter_registry()
        if not adapter_registry.is_adapter_enabled("kira-gcal"):
            click.echo("‚ùå –ê–¥–∞–ø—Ç–µ—Ä kira-gcal –Ω–µ –≤–∫–ª—é—á–µ–Ω")
            return 1

        if verbose:
            click.echo("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä kira-gcal –≤–∫–ª—é—á–µ–Ω")

        adapter = GCalAdapter(config)
        return handle_pull(adapter, calendar, days, config, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è calendar –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("push")
@click.option(
    "--calendar",
    type=str,
    help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Å–µ)",
)
@click.option(
    "--dry-run",
    is_flag=True,
    help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
)
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def push_command(calendar: str | None, dry_run: bool, verbose: bool) -> int:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)."""

    try:
        config = load_config()

        if verbose:
            click.echo("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            click.echo(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        adapter_registry = get_adapter_registry()
        if not adapter_registry.is_adapter_enabled("kira-gcal"):
            click.echo("‚ùå –ê–¥–∞–ø—Ç–µ—Ä kira-gcal –Ω–µ –≤–∫–ª—é—á–µ–Ω")
            return 1

        if verbose:
            click.echo("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä kira-gcal –≤–∫–ª—é—á–µ–Ω")

        adapter = GCalAdapter(config)
        return handle_push(adapter, calendar, dry_run, config, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è calendar –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def handle_pull(
    adapter: GCalAdapter,
    calendar_id: str | None,
    days: int,
    config: dict,
    verbose: bool,
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã pull."""

    click.echo(f"üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (pull) –Ω–∞ {days} –¥–Ω–µ–π...")

    if verbose:
        calendars = config.get("adapters", {}).get("gcal", {}).get("calendars", {})
        if calendar_id:
            click.echo(f"   –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {calendar_id}")
        else:
            click.echo(f"   –ö–∞–ª–µ–Ω–¥–∞—Ä–∏: {list(calendars.keys())}")

    try:
        result = adapter.pull(calendar_id=calendar_id, days=days)

        if verbose:
            click.echo(f"   –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {result.get('events_count', 0)}")
            click.echo(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('processed_count', 0)}")

        click.echo("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return 0
    except Exception as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {exc}")
        return 1


def handle_push(
    adapter: GCalAdapter,
    calendar_id: str | None,
    dry_run: bool,
    config: dict,
    verbose: bool,
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã push."""

    click.echo("üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (push)...")

    if verbose:
        calendars = config.get("adapters", {}).get("gcal", {}).get("calendars", {})
        if calendar_id:
            click.echo(f"   –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {calendar_id}")
        else:
            click.echo(f"   –ö–∞–ª–µ–Ω–¥–∞—Ä–∏: {list(calendars.keys())}")
        click.echo(f"   –†–µ–∂–∏–º dry-run: {'–¥–∞' if dry_run else '–Ω–µ—Ç'}")

    try:
        result = adapter.push(calendar_id=calendar_id, dry_run=dry_run)

        if verbose:
            click.echo(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {result.get('events_count', 0)}")
            click.echo(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.get('processed_count', 0)}")

        click.echo("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return 0
    except Exception as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {exc}")
        return 1


def main(args: Optional[List[str]] = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:  # pragma: no cover - click –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":  # pragma: no cover - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–æ–¥—É–ª—å
    sys.exit(main())

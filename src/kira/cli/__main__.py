#!/usr/bin/env python3
"""–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å CLI –¥–ª—è Kira"""

import sys
from pathlib import Path
from typing import Any

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

# Core CLI imports (always available)
from .kira_backup import cli as backup_cli
from .kira_calendar import cli as calendar_cli
from .kira_code import cli as code_cli
from .kira_context import cli as context_cli
from .kira_diag import diag_command
from .kira_doctor import doctor as doctor_command
from .kira_ext import cli as ext_cli
from .kira_inbox import cli as inbox_cli
from .kira_links import cli as links_cli
from .kira_migrate import cli as migrate_cli
from .kira_note import cli as note_cli
from .kira_plugin_template import cli as plugin_cli
from .kira_project import cli as project_cli
from .kira_review import cli as review_cli
from .kira_rollup import cli as rollup_cli
from .kira_schedule import cli as schedule_cli
from .kira_search import cli as search_cli
from .kira_stats import cli as stats_cli
from .kira_sync import cli as sync_cli
from .kira_task import cli as task_cli
from .kira_today import cli as today_cli
from .kira_vault import cli as vault_cli

# Optional CLI imports (lazy loaded)
# These require extra dependencies and will be imported only when invoked

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}
EPILOG = """
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
  kira today                   # –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è
  kira task list               # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
  kira task add "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"  # –ë—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
  kira task start <id>         # –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π
  kira task done <id>          # –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
  kira search "–æ—Ç—á–µ—Ç"          # –ü–æ–∏—Å–∫ –ø–æ Vault

  # –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
  kira inbox                   # –ó–∞–ø—É—Å—Ç–∏—Ç—å inbox-–∫–æ–Ω–≤–µ–π–µ—Ä
  kira calendar pull           # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (pull)
  kira calendar push           # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (push)
  kira schedule view --today   # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  kira schedule conflicts      # –ù–∞–π—Ç–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
  kira rollup daily            # –°–æ–∑–¥–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π rollup

  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  kira vault init              # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Vault
  kira vault new --type task --title "My Task"  # –°–æ–∑–¥–∞—Ç—å entity
  kira migrate run --dry-run   # Preview migration changes (Phase 4)
  kira migrate run             # Migrate vault to new schema (Phase 4)
  kira ext list                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  kira validate                # –í–∞–ª–∏–¥–∞—Ü–∏—è Vault
""".strip()


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="Kira - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏",
    epilog=EPILOG,
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ CLI."""


# Lazy loading wrappers for optional commands
@click.group("agent", help="AI agent commands (requires: poetry install --extras agent)")
def agent_cli_wrapper() -> None:
    """Lazy-loaded agent commands."""


@agent_cli_wrapper.result_callback()
def load_agent_cli(result: Any, **kwargs: Any) -> Any:
    """Load agent CLI when invoked."""
    try:
        from .kira_agent import agent as agent_cli

        # Transfer subcommands from actual CLI
        agent_cli_wrapper.commands = agent_cli.commands
    except ImportError as e:
        click.echo(
            f"‚ùå Agent commands require additional dependencies.\n"
            f"   Install with: poetry install --extras agent\n"
            f"   Error: {e}",
            err=True,
        )
        sys.exit(1)
    return result


@click.group("telegram", help="Telegram bot commands (requires: poetry install --extras agent)")
def telegram_cli_wrapper() -> None:
    """Lazy-loaded telegram commands."""


@telegram_cli_wrapper.result_callback()
def load_telegram_cli(result: Any, **kwargs: Any) -> Any:
    """Load telegram CLI when invoked."""
    try:
        from .kira_telegram import cli as telegram_cli

        # Transfer subcommands from actual CLI
        telegram_cli_wrapper.commands = telegram_cli.commands
    except ImportError as e:
        click.echo(
            f"‚ùå Telegram commands require additional dependencies.\n"
            f"   Install with: poetry install --extras agent\n"
            f"   Error: {e}",
            err=True,
        )
        sys.exit(1)
    return result


@cli.command("validate")
def validate_vault() -> int:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Vault –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º."""

    try:
        from ..core.config import load_config
        from ..core.schemas import validate_vault_schemas

        config = load_config()
        vault_path = config.get("vault", {}).get("path")

        if not vault_path:
            click.echo("‚ùå –ü—É—Ç—å –∫ Vault –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return 1

        click.echo(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è Vault: {vault_path}")

        errors = validate_vault_schemas(vault_path)

        if errors:
            click.echo("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in errors:
                click.echo(f"  - {error}")
            return 1

        click.echo("‚úÖ Vault –≤–∞–ª–∏–¥–µ–Ω")
        return 0
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {exc}")
        return 1


# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã
# Core commands (always available)
cli.add_command(today_cli, "today")
cli.add_command(task_cli, "task")
cli.add_command(note_cli, "note")
cli.add_command(project_cli, "project")
cli.add_command(search_cli, "search")
cli.add_command(inbox_cli, "inbox")
cli.add_command(calendar_cli, "calendar")
cli.add_command(schedule_cli, "schedule")
cli.add_command(sync_cli, "sync")
cli.add_command(rollup_cli, "rollup")
cli.add_command(review_cli, "review")
cli.add_command(stats_cli, "stats")
cli.add_command(context_cli, "context")
cli.add_command(links_cli, "links")
cli.add_command(code_cli, "code")
cli.add_command(ext_cli, "ext")
cli.add_command(plugin_cli, "plugin")
cli.add_command(vault_cli, "vault")
cli.add_command(backup_cli, "backup")
cli.add_command(migrate_cli, "migrate")
cli.add_command(diag_command, "diag")
cli.add_command(doctor_command, "doctor")

# Optional commands (lazy loaded)
cli.add_command(agent_cli_wrapper, "agent")
cli.add_command(telegram_cli_wrapper, "telegram")


def main(args: list[str] | None = None) -> int:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""

    try:
        normalized_args = list(args) if args is not None else None
        return cli.main(args=normalized_args, standalone_mode=False)
    except SystemExit as exc:  # pragma: no cover - click –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":  # pragma: no cover - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–æ–¥—É–ª—å
    sys.exit(main())

#!/usr/bin/env python3
"""–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å CLI –¥–ª—è Kira"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

from .kira_calendar import cli as calendar_cli
from .kira_code import cli as code_cli
from .kira_ext import cli as ext_cli
from .kira_inbox import cli as inbox_cli
from .kira_plugin_template import cli as plugin_cli
from .kira_rollup import cli as rollup_cli

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}
EPILOG = """
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  kira inbox                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å inbox-–∫–æ–Ω–≤–µ–π–µ—Ä
  kira calendar pull           # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (pull)
  kira calendar push           # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å (push)
  kira rollup daily            # –°–æ–∑–¥–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π rollup
  kira rollup weekly           # –°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π rollup
  kira ext list               # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  kira ext install <name>     # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  kira ext enable <name>      # –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  kira ext disable <name>     # –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  kira validate               # –í–∞–ª–∏–¥–∞—Ü–∏—è Vault
""".strip()


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="Kira - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏",
    epilog=EPILOG,
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ CLI."""


@cli.command("validate")
def validate_vault() -> int:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Vault –ø—Ä–æ—Ç–∏–≤ —Å—Ö–µ–º."""

    try:
        from ..core.config import load_config
        from ..core.schemas import validate_vault_schemas

        config = load_config()
        vault_path = config.get("vault", {}).get("path")

        if not vault_path:
            click.echo("‚ùå –ü—É—Ç—å –∫ Vault –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return 1

        click.echo(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è Vault: {vault_path}")

        errors = validate_vault_schemas(vault_path)

        if errors:
            click.echo("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in errors:
                click.echo(f"  - {error}")
            return 1

        click.echo("‚úÖ Vault –≤–∞–ª–∏–¥–µ–Ω")
        return 0
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {exc}")
        return 1


# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã
cli.add_command(inbox_cli, "inbox")
cli.add_command(calendar_cli, "calendar")
cli.add_command(rollup_cli, "rollup")
cli.add_command(code_cli, "code")
cli.add_command(ext_cli, "ext")
cli.add_command(plugin_cli, "plugin")


def main(args: list[str] | None = None) -> int:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""

    try:
        normalized_args = list(args) if args is not None else None
        return cli.main(args=normalized_args, standalone_mode=False)
    except SystemExit as exc:  # pragma: no cover - click –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":  # pragma: no cover - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–æ–¥—É–ª—å
    sys.exit(main())

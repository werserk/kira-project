#!/usr/bin/env python3
"""
CLI –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è rollup –æ—Ç—á–µ—Ç–æ–≤
"""
import argparse
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from ..core.config import load_config
from ..pipelines.rollup_pipeline import RollupPipeline
from ..registry import get_plugin_registry


def create_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è rollup –∫–æ–º–∞–Ω–¥—ã"""
    parser = argparse.ArgumentParser(
        prog="kira rollup",
        description="–°–æ–∑–¥–∞—Ç—å rollup –æ—Ç—á–µ—Ç—ã (–¥–Ω–µ–≤–Ω—ã–µ/–Ω–µ–¥–µ–ª—å–Ω—ã–µ)"
    )

    subparsers = parser.add_subparsers(
        dest='period',
        help='–ü–µ—Ä–∏–æ–¥ rollup',
        required=True
    )

    # –ö–æ–º–∞–Ω–¥–∞ daily
    daily_parser = subparsers.add_parser(
        'daily',
        help='–°–æ–∑–¥–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π rollup'
    )
    daily_parser.add_argument(
        '--date',
        type=str,
        help='–î–∞—Ç–∞ –¥–ª—è rollup (YYYY-MM-DD, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—á–µ—Ä–∞)'
    )
    daily_parser.add_argument(
        '--output',
        type=str,
        help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞'
    )
    daily_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    # –ö–æ–º–∞–Ω–¥–∞ weekly
    weekly_parser = subparsers.add_parser(
        'weekly',
        help='–°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π rollup'
    )
    weekly_parser.add_argument(
        '--week',
        type=str,
        help='–ù–µ–¥–µ–ª—è –¥–ª—è rollup (YYYY-WW, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è)'
    )
    weekly_parser.add_argument(
        '--output',
        type=str,
        help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞'
    )
    weekly_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    return parser


def main(args: Optional[List[str]] = None) -> int:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è rollup CLI

    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ sys.argv)

    Returns:
        –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
    """
    if args is None:
        args = sys.argv[1:]

    parser = create_parser()
    parsed_args = parser.parse_args(args)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()

        if parsed_args.verbose:
            print("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            print(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        # –°–æ–∑–¥–∞–µ–º pipeline
        pipeline = RollupPipeline(config)

        if parsed_args.period == 'daily':
            return handle_daily_rollup(pipeline, parsed_args)
        elif parsed_args.period == 'weekly':
            return handle_weekly_rollup(pipeline, parsed_args)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {parsed_args.period}")
            return 1

    except FileNotFoundError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è rollup –∫–æ–º–∞–Ω–¥—ã: {e}")
        if parsed_args.verbose:
            import traceback
            traceback.print_exc()
        return 1


def handle_daily_rollup(pipeline: RollupPipeline, args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ rollup"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    if args.date:
        try:
            target_date = datetime.strptime(args.date, '%Y-%m-%d').date()
        except ValueError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {args.date}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
            return 1
    else:
        target_date = (datetime.now() - timedelta(days=1)).date()

    print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ rollup –∑–∞ {target_date}...")

    if args.verbose:
        print(f"   –î–∞—Ç–∞: {target_date}")
        if args.output:
            print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.output}")

    try:
        # –°–æ–∑–¥–∞–µ–º rollup
        result = pipeline.create_daily_rollup(
            date=target_date,
            output_path=args.output
        )

        if args.verbose:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {result.get('tasks_count', 0)}")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {result.get('events_count', 0)}")
            print(f"   –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.get('entries_count', 0)}")

        print("‚úÖ –î–Ω–µ–≤–Ω–æ–π rollup —Å–æ–∑–¥–∞–Ω")
        return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ rollup: {e}")
        return 1


def handle_weekly_rollup(pipeline: RollupPipeline, args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ rollup"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–µ–ª—é
    if args.week:
        try:
            year, week = args.week.split('-W')
            year = int(year)
            week = int(week)
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
            jan_4 = datetime(year, 1, 4)
            monday = jan_4 - timedelta(days=jan_4.weekday()) + timedelta(weeks=week-1)
            start_date = monday.date()
        except (ValueError, IndexError):
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ–¥–µ–ª–∏: {args.week}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-WW")
            return 1
    else:
        # –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è
        today = datetime.now().date()
        days_since_monday = today.weekday()
        last_monday = today - timedelta(days=days_since_monday + 7)
        start_date = last_monday

    end_date = start_date + timedelta(days=6)

    print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ rollup –∑–∞ {start_date} - {end_date}...")

    if args.verbose:
        print(f"   –ù–µ–¥–µ–ª—è: {start_date} - {end_date}")
        if args.output:
            print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.output}")

    try:
        # –°–æ–∑–¥–∞–µ–º rollup
        result = pipeline.create_weekly_rollup(
            start_date=start_date,
            end_date=end_date,
            output_path=args.output
        )

        if args.verbose:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {result.get('tasks_count', 0)}")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {result.get('events_count', 0)}")
            print(f"   –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.get('entries_count', 0)}")
            print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º: {result.get('daily_stats', {})}")

        print("‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π rollup —Å–æ–∑–¥–∞–Ω")
        return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ rollup: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())

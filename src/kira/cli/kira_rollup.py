"""CLI –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è rollup –æ—Ç—á–µ—Ç–æ–≤"""

import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

from ..core.config import load_config
from ..pipelines.rollup_pipeline import RollupPipeline

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–°–æ–∑–¥–∞—Ç—å rollup –æ—Ç—á–µ—Ç—ã (–¥–Ω–µ–≤–Ω—ã–µ/–Ω–µ–¥–µ–ª—å–Ω—ã–µ)",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ rollup."""


@cli.command("daily")
@click.option("--date", type=str, help="–î–∞—Ç–∞ –¥–ª—è rollup (YYYY-MM-DD, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—á–µ—Ä–∞)")
@click.option("--output", type=str, help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def daily_command(date: str | None, output: str | None, verbose: bool) -> int:
    """–°–æ–∑–¥–∞—Ç—å –¥–Ω–µ–≤–Ω–æ–π rollup."""

    try:
        config = load_config()

        if verbose:
            click.echo("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            click.echo(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        pipeline = RollupPipeline(config)
        return handle_daily_rollup(pipeline, date, output, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è rollup –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("weekly")
@click.option("--week", type=str, help="–ù–µ–¥–µ–ª—è –¥–ª—è rollup (YYYY-WW, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è)")
@click.option("--output", type=str, help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def weekly_command(week: str | None, output: str | None, verbose: bool) -> int:
    """–°–æ–∑–¥–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π rollup."""

    try:
        config = load_config()

        if verbose:
            click.echo("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            click.echo(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        pipeline = RollupPipeline(config)
        return handle_weekly_rollup(pipeline, week, output, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è rollup –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def handle_daily_rollup(
    pipeline: RollupPipeline,
    date: str | None,
    output: str | None,
    verbose: bool,
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ rollup."""

    if date:
        try:
            target_date = datetime.strptime(date, "%Y-%m-%d").date()
        except ValueError:
            click.echo(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
            return 1
    else:
        target_date = (datetime.now() - timedelta(days=1)).date()

    click.echo(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ rollup –∑–∞ {target_date}...")

    if verbose:
        click.echo(f"   –î–∞—Ç–∞: {target_date}")
        if output:
            click.echo(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output}")

    try:
        result = pipeline.create_daily_rollup(date=target_date, output_path=output)

        if verbose:
            click.echo(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {result.get('tasks_count', 0)}")
            click.echo(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {result.get('events_count', 0)}")
            click.echo(f"   –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.get('entries_count', 0)}")

        click.echo("‚úÖ –î–Ω–µ–≤–Ω–æ–π rollup —Å–æ–∑–¥–∞–Ω")
        return 0
    except Exception as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ pipeline
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ rollup: {exc}")
        return 1


def handle_weekly_rollup(
    pipeline: RollupPipeline,
    week: str | None,
    output: str | None,
    verbose: bool,
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ rollup."""

    if week:
        try:
            year, week_number = week.split("-W")
            year = int(year)
            week_number = int(week_number)
            jan_4 = datetime(year, 1, 4)
            monday = jan_4 - timedelta(days=jan_4.weekday()) + timedelta(weeks=week_number - 1)
            start_date = monday.date()
        except (ValueError, IndexError):
            click.echo(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ–¥–µ–ª–∏: {week}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-WW")
            return 1
    else:
        today = datetime.now().date()
        days_since_monday = today.weekday()
        last_monday = today - timedelta(days=days_since_monday + 7)
        start_date = last_monday

    end_date = start_date + timedelta(days=6)

    click.echo(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ rollup –∑–∞ {start_date} - {end_date}...")

    if verbose:
        click.echo(f"   –ù–µ–¥–µ–ª—è: {start_date} - {end_date}")
        if output:
            click.echo(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output}")

    try:
        result = pipeline.create_weekly_rollup(
            start_date=start_date,
            end_date=end_date,
            output_path=output,
        )

        if verbose:
            click.echo(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {result.get('tasks_count', 0)}")
            click.echo(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {result.get('events_count', 0)}")
            click.echo(f"   –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result.get('entries_count', 0)}")

        click.echo("‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π rollup —Å–æ–∑–¥–∞–Ω")
        return 0
    except Exception as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ pipeline
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ rollup: {exc}")
        return 1


def main(args: Optional[List[str]] = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:  # pragma: no cover - click –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":  # pragma: no cover - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–æ–¥—É–ª—å
    sys.exit(main())

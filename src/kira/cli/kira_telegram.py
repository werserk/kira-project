"""CLI –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

from ..adapters.telegram.adapter import TelegramAdapter, TelegramAdapterConfig, create_telegram_adapter
from ..core.config import load_config
from ..core.events import create_event_bus
from ..core.scheduler import create_scheduler

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ telegram."""


@cli.command("start")
@click.option("--token", type=str, help="Bot token (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ TELEGRAM_BOT_TOKEN env)")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def start_command(token: str | None, verbose: bool) -> int:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling."""

    try:
        config = load_config()

        if verbose:
            click.echo("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            click.echo(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        # Get token from parameter or environment
        bot_token = token or os.getenv("TELEGRAM_BOT_TOKEN")
        if not bot_token:
            click.echo("‚ùå Bot token –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --token –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN")
            return 1

        return handle_telegram_start(config, bot_token, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("test")
@click.option("--token", type=str, help="Bot token (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ TELEGRAM_BOT_TOKEN env)")
@click.option("--chat-id", type=int, required=True, help="Chat ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
def test_command(token: str | None, chat_id: int) -> int:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""

    try:
        # Get token from parameter or environment
        bot_token = token or os.getenv("TELEGRAM_BOT_TOKEN")
        if not bot_token:
            click.echo("‚ùå Bot token –Ω–µ —É–∫–∞–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --token –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN")
            return 1

        click.echo(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat {chat_id}...")

        # Create minimal adapter config
        adapter_config = TelegramAdapterConfig(
            bot_token=bot_token,
            allowed_chat_ids=[chat_id],
        )

        adapter = TelegramAdapter(adapter_config)

        # Send test message
        result = adapter.send_message(
            chat_id=chat_id,
            text="‚úÖ Kira Telegram Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞.",
        )

        if result:
            click.echo("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return 0
        else:
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return 1

    except Exception as exc:  # pragma: no cover - –≤–Ω–µ—à–Ω–∏–π API
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {exc}")
        import traceback

        traceback.print_exc()
        return 1


def handle_telegram_start(
    config: dict,
    bot_token: str,
    verbose: bool,
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞."""

    click.echo("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

    # Get telegram config
    telegram_config = config.get("adapters", {}).get("telegram", {})

    # Parse allowed chats and users
    allowed_chat_ids = []
    whitelist_chats = telegram_config.get("whitelist_chats", [])
    if whitelist_chats:
        allowed_chat_ids = [int(chat_id) for chat_id in whitelist_chats]

    if verbose:
        click.echo(f"   –†–µ–∂–∏–º: {telegram_config.get('mode', 'bot')}")
        if allowed_chat_ids:
            click.echo(f"   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã: {allowed_chat_ids}")
        else:
            click.echo("   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã: –≤—Å–µ")

    # Create event bus and scheduler
    event_bus = create_event_bus()
    scheduler = create_scheduler()

    # Create adapter config
    adapter_config = TelegramAdapterConfig(
        bot_token=bot_token,
        allowed_chat_ids=allowed_chat_ids,
        polling_timeout=telegram_config.get("polling_timeout", 30),
        log_path=Path("logs/adapters/telegram.jsonl"),
        temp_dir=Path("tmp/telegram"),
        daily_briefing_time=telegram_config.get("daily_briefing_time", "09:00"),
    )

    # Create adapter
    adapter = create_telegram_adapter(
        config=adapter_config,
        event_bus=event_bus,
        scheduler=scheduler,
    )

    try:
        click.echo("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        click.echo("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

        if verbose:
            click.echo("   –†–µ–∂–∏–º: long polling")
            click.echo(f"   Timeout: {adapter_config.polling_timeout}s")

        # Start polling (blocks until interrupted)
        adapter.start_polling()

        return 0

    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        adapter.stop_polling()
        click.echo("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return 0

    except Exception as exc:  # pragma: no cover - –≤–Ω–µ—à–Ω–∏–π API
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:  # pragma: no cover - click –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":  # pragma: no cover - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–æ–¥—É–ª—å
    sys.exit(main())

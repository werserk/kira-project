#!/usr/bin/env python3
"""CLI –º–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

import sys
from collections import Counter
from datetime import UTC, datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click
import yaml

from ..core.config import load_config

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.command(
    context_settings=CONTEXT_SETTINGS,
    help="–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É",
)
@click.option(
    "--period",
    type=click.Choice(["week", "month", "year", "all"]),
    default="week",
    show_default=True,
    help="–ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
)
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def cli(period: str, verbose: bool) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    try:
        config = load_config()
        vault_path = Path(config.get("vault", {}).get("path", "vault"))

        if not vault_path.exists():
            click.echo(f"‚ùå Vault –Ω–µ –Ω–∞–π–¥–µ–Ω: {vault_path}")
            return 1

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        now = datetime.now(UTC)
        if period == "week":
            start_date = now - timedelta(days=7)
            period_name = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
        elif period == "month":
            start_date = now - timedelta(days=30)
            period_name = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
        elif period == "year":
            start_date = now - timedelta(days=365)
            period_name = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥"
        else:  # all
            start_date = datetime.min.replace(tzinfo=UTC)
            period_name = "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"

        # –°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = collect_statistics(vault_path, start_date, now)

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        display_statistics(stats, period_name, verbose)

        return 0

    except Exception as exc:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def collect_statistics(vault_path: Path, start_date: datetime, end_date: datetime) -> dict:
    """–°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ Vault."""
    stats = {
        "tasks": {
            "total": 0,
            "completed": 0,
            "in_progress": 0,
            "todo": 0,
            "blocked": 0,
            "completion_rate": 0.0,
            "by_status": Counter(),
            "by_tag": Counter(),
            "overdue": 0,
        },
        "notes": {
            "total": 0,
            "by_tag": Counter(),
        },
        "events": {
            "total": 0,
            "attended": 0,
        },
        "productivity": {
            "avg_completion_time": None,
            "most_productive_day": None,
            "streak_days": 0,
        },
    }

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
    tasks_dir = vault_path / "tasks"
    if tasks_dir.exists():
        for task_file in tasks_dir.glob("task-*.md"):
            try:
                metadata = load_metadata(task_file)

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤ –ø–µ—Ä–∏–æ–¥
                created = parse_date(metadata.get("created"))
                if not created or created < start_date or created > end_date:
                    continue

                stats["tasks"]["total"] += 1
                status = metadata.get("status", "todo")
                stats["tasks"]["by_status"][status] += 1

                if status == "done":
                    stats["tasks"]["completed"] += 1
                elif status == "doing":
                    stats["tasks"]["in_progress"] += 1
                elif status == "todo":
                    stats["tasks"]["todo"] += 1
                elif status == "blocked":
                    stats["tasks"]["blocked"] += 1

                # –¢–µ–≥–∏
                for tag in metadata.get("tags", []):
                    stats["tasks"]["by_tag"][tag] += 1

                # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                due = metadata.get("due")
                if due and status not in ["done"]:
                    due_date = parse_date(due)
                    if due_date and due_date < datetime.now(UTC):
                        stats["tasks"]["overdue"] += 1

            except Exception:
                continue

    # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if stats["tasks"]["total"] > 0:
        stats["tasks"]["completion_rate"] = stats["tasks"]["completed"] / stats["tasks"]["total"] * 100

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º
    notes_dir = vault_path / "notes"
    if notes_dir.exists():
        for note_file in notes_dir.glob("note-*.md"):
            try:
                metadata = load_metadata(note_file)

                created = parse_date(metadata.get("created"))
                if not created or created < start_date or created > end_date:
                    continue

                stats["notes"]["total"] += 1

                # –¢–µ–≥–∏
                for tag in metadata.get("tags", []):
                    stats["notes"]["by_tag"][tag] += 1

            except Exception:
                continue

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
    events_dir = vault_path / "events"
    if events_dir.exists():
        for event_file in events_dir.glob("event-*.md"):
            try:
                metadata = load_metadata(event_file)

                start = parse_date(metadata.get("start"))
                if not start or start < start_date or start > end_date:
                    continue

                stats["events"]["total"] += 1

                # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
                if start < datetime.now(UTC):
                    stats["events"]["attended"] += 1

            except Exception:
                continue

    return stats


def display_statistics(stats: dict, period_name: str, verbose: bool) -> None:
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    click.echo(f"\nüìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}\n")
    click.echo("=" * 60)

    # –ó–∞–¥–∞—á–∏
    task_stats = stats["tasks"]
    click.echo("\nüìã –ó–∞–¥–∞—á–∏:")
    click.echo(f"  –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {task_stats['total']}")

    if task_stats["total"] > 0:
        click.echo(f"  ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task_stats['completed']} ({task_stats['completion_rate']:.1f}%)")
        click.echo(f"  üîÑ –í —Ä–∞–±–æ—Ç–µ: {task_stats['in_progress']}")
        click.echo(f"  ‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: {task_stats['todo']}")
        click.echo(f"  üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {task_stats['blocked']}")

        if task_stats["overdue"] > 0:
            click.echo(f"  üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {task_stats['overdue']}")

        # –¢–æ–ø-5 —Ç–µ–≥–æ–≤ –¥–ª—è –∑–∞–¥–∞—á
        if task_stats["by_tag"] and verbose:
            click.echo("\n  üìå –¢–æ–ø-5 —Ç–µ–≥–æ–≤:")
            for tag, count in task_stats["by_tag"].most_common(5):
                click.echo(f"     #{tag}: {count}")

    # –ó–∞–º–µ—Ç–∫–∏
    note_stats = stats["notes"]
    click.echo("\nüìù –ó–∞–º–µ—Ç–∫–∏:")
    click.echo(f"  –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {note_stats['total']}")

    if note_stats["by_tag"] and verbose:
        click.echo("\n  üìå –¢–æ–ø-5 —Ç–µ–≥–æ–≤:")
        for tag, count in note_stats["by_tag"].most_common(5):
            click.echo(f"     #{tag}: {count}")

    # –°–æ–±—ã—Ç–∏—è
    event_stats = stats["events"]
    click.echo("\nüìÜ –°–æ–±—ã—Ç–∏—è:")
    click.echo(f"  –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {event_stats['total']}")
    click.echo(f"  –ü–æ—Å–µ—â–µ–Ω–æ: {event_stats['attended']}")

    # –û–±—â–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    click.echo("\nüéØ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")

    total_items = task_stats["total"] + note_stats["total"]
    click.echo(f"  –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {total_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    if task_stats["total"] > 0:
        if task_stats["completion_rate"] >= 80:
            productivity_emoji = "üî•"
            productivity_msg = "–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!"
        elif task_stats["completion_rate"] >= 60:
            productivity_emoji = "üëç"
            productivity_msg = "–•–æ—Ä–æ—à–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        elif task_stats["completion_rate"] >= 40:
            productivity_emoji = "üìà"
            productivity_msg = "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        else:
            productivity_emoji = "üí™"
            productivity_msg = "–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏"

        click.echo(f"  {productivity_emoji} {productivity_msg}")

    click.echo("\n" + "=" * 60)


def load_metadata(file_path: Path) -> dict:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞."""
    with open(file_path, encoding="utf-8") as f:
        content = f.read()

    if not content.startswith("---"):
        return {}

    parts = content.split("---", 2)
    if len(parts) < 3:
        return {}

    return yaml.safe_load(parts[1]) or {}


def parse_date(date_str: str | None) -> datetime | None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
    if not date_str:
        return None
    try:
        return datetime.fromisoformat(date_str.replace("Z", "+00:00"))
    except Exception:
        return None


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":
    sys.exit(main())

"""CLI –º–æ–¥—É–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

from ..core.config import load_config
from ..core.events import create_event_bus
from ..core.scheduler import create_scheduler
from ..pipelines.sync_pipeline import SyncPipeline, SyncPipelineConfig

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ (GCal, Telegram)",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ sync."""


@cli.command("run")
@click.option(
    "--adapters",
    type=str,
    help="–°–ø–∏—Å–æ–∫ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (gcal,telegram). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Å–µ",
)
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def run_command(adapters: str | None, verbose: bool) -> int:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∞–¥–∞–ø—Ç–µ—Ä–æ–≤."""

    try:
        config = load_config()

        if verbose:
            click.echo("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            click.echo(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        adapter_list = None
        if adapters:
            adapter_list = [a.strip() for a in adapters.split(",")]

        return handle_sync_run(config, adapter_list, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è sync –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("schedule")
@click.option(
    "--interval",
    type=int,
    default=300,
    show_default=True,
    help="–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
)
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def schedule_command(interval: int, verbose: bool) -> int:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (daemon mode)."""

    try:
        config = load_config()

        if verbose:
            click.echo("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            click.echo(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        return handle_sync_schedule(config, interval, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è sync schedule: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def handle_sync_run(
    config: dict,
    adapter_list: list[str] | None,
    verbose: bool,
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""

    adapters_str = ", ".join(adapter_list) if adapter_list else "–≤—Å–µ"
    click.echo(f"üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: {adapters_str}...")

    if verbose:
        click.echo(f"   –ê–¥–∞–ø—Ç–µ—Ä—ã: {adapter_list or '–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ'}")

    # Create event bus for pipeline
    event_bus = create_event_bus()

    # Create pipeline config
    pipeline_config = SyncPipelineConfig(
        adapters=adapter_list or ["gcal", "telegram"],
        log_path=Path("logs/pipelines/sync.jsonl"),
    )

    # Create pipeline
    pipeline = SyncPipeline(
        config=pipeline_config,
        event_bus=event_bus,
    )

    try:
        result = pipeline.run(adapters=adapter_list)

        if verbose:
            click.echo(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {result.adapters_synced}")
            click.echo(f"   –û—à–∏–±–æ–∫: {result.adapters_failed}")
            click.echo(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.duration_ms:.2f}ms")
            click.echo(f"   Trace ID: {result.trace_id}")

        if result.success:
            click.echo("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return 0
        else:
            click.echo("‚ö†Ô∏è  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏:")
            for error in result.errors:
                click.echo(f"   - {error}")
            return 1

    except Exception as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ pipeline
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def handle_sync_schedule(
    config: dict,
    interval: int,
    verbose: bool,
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""

    click.echo(f"‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}s)...")

    if verbose:
        click.echo("   –†–µ–∂–∏–º: daemon")
        click.echo(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥")

    # Create event bus and scheduler
    event_bus = create_event_bus()
    scheduler = create_scheduler()

    # Create pipeline config
    pipeline_config = SyncPipelineConfig(
        sync_interval_seconds=interval,
        adapters=["gcal", "telegram"],
        log_path=Path("logs/pipelines/sync.jsonl"),
    )

    # Create pipeline
    pipeline = SyncPipeline(
        config=pipeline_config,
        event_bus=event_bus,
        scheduler=scheduler,
    )

    try:
        # Schedule periodic sync
        job_id = pipeline.schedule_periodic_sync()

        if job_id:
            click.echo(f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (Job ID: {job_id})")
            click.echo("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

            if verbose:
                click.echo(f"   –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ {interval} —Å–µ–∫—É–Ω–¥")

            # Keep running until interrupted
            try:
                scheduler.start()
            except KeyboardInterrupt:
                click.echo("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
                pipeline.cancel_periodic_sync()
                scheduler.stop()
                click.echo("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

            return 0
        else:
            click.echo("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
            return 1

    except Exception as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç scheduler
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:  # pragma: no cover - click –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":  # pragma: no cover - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–æ–¥—É–ª—å
    sys.exit(main())

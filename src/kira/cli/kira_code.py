#!/usr/bin/env python3
"""
CLI –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º
"""
import argparse
import sys
from pathlib import Path
from typing import List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from ..core.config import load_config
from ..registry import get_plugin_registry


def create_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è code –∫–æ–º–∞–Ω–¥—ã"""
    parser = argparse.ArgumentParser(
        prog="kira code",
        description="–†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"
    )

    subparsers = parser.add_subparsers(
        dest='action',
        help='–î–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–¥–æ–º',
        required=True
    )

    # –ö–æ–º–∞–Ω–¥–∞ analyze
    analyze_parser = subparsers.add_parser(
        'analyze',
        help='–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤ Vault'
    )
    analyze_parser.add_argument(
        '--path',
        type=str,
        help='–ü—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–µ—Å—å Vault)'
    )
    analyze_parser.add_argument(
        '--output',
        type=str,
        help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞'
    )
    analyze_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    # –ö–æ–º–∞–Ω–¥–∞ index
    index_parser = subparsers.add_parser(
        'index',
        help='–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞'
    )
    index_parser.add_argument(
        '--rebuild',
        action='store_true',
        help='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å —Å –Ω—É–ª—è'
    )
    index_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    # –ö–æ–º–∞–Ω–¥–∞ search
    search_parser = subparsers.add_parser(
        'search',
        help='–ü–æ–∏—Å–∫ –≤ –∫–æ–¥–µ'
    )
    search_parser.add_argument(
        'query',
        help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
    )
    search_parser.add_argument(
        '--type',
        choices=['function', 'class', 'variable', 'comment', 'all'],
        default='all',
        help='–¢–∏–ø –ø–æ–∏—Å–∫–∞'
    )
    search_parser.add_argument(
        '--limit',
        type=int,
        default=20,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
    )
    search_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    return parser


def main(args: Optional[List[str]] = None) -> int:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è code CLI

    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ sys.argv)

    Returns:
        –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
    """
    if args is None:
        args = sys.argv[1:]

    parser = create_parser()
    parsed_args = parser.parse_args(args)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()

        if parsed_args.verbose:
            print("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            print(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ code –ø–ª–∞–≥–∏–Ω –≤–∫–ª—é—á–µ–Ω
        plugin_registry = get_plugin_registry()
        if not plugin_registry.is_plugin_enabled('kira-code'):
            print("‚ùå –ü–ª–∞–≥–∏–Ω kira-code –Ω–µ –≤–∫–ª—é—á–µ–Ω")
            return 1

        if parsed_args.verbose:
            print("‚úÖ –ü–ª–∞–≥–∏–Ω kira-code –≤–∫–ª—é—á–µ–Ω")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if parsed_args.action == 'analyze':
            return handle_analyze(parsed_args, config)
        elif parsed_args.action == 'index':
            return handle_index(parsed_args, config)
        elif parsed_args.action == 'search':
            return handle_search(parsed_args, config)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {parsed_args.action}")
            return 1

    except FileNotFoundError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è code –∫–æ–º–∞–Ω–¥—ã: {e}")
        if parsed_args.verbose:
            import traceback
            traceback.print_exc()
        return 1


def handle_analyze(args, config) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã analyze"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...")

    if args.verbose:
        if args.path:
            print(f"   –ü—É—Ç—å: {args.path}")
        else:
            print("   –ü—É—Ç—å: –≤–µ—Å—å Vault")
        if args.output:
            print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.output}")

    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        print("   –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π...")
        print("   –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Å–æ–≤...")
        print("   –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

        if args.output:
            with open(args.output, 'w') as f:
                f.write("# –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞\n\n")
                f.write("## –§—É–Ω–∫—Ü–∏–∏\n")
                f.write("- function1()\n")
                f.write("- function2()\n")
                f.write("\n## –ö–ª–∞—Å—Å—ã\n")
                f.write("- Class1\n")
                f.write("- Class2\n")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}")

        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: {e}")
        return 1


def handle_index(args, config) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã index"""
    if args.rebuild:
        print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–¥–∞...")
    else:
        print("üìö –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–æ–¥–∞...")

    if args.verbose:
        print("   –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
        print("   –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤...")
        print("   –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞...")

    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        print("   –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: 42")
        print("   –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: 156")
        print("   –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: 23")

        print("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
        return 1


def handle_search(args, config) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã search"""
    print(f"üîç –ü–æ–∏—Å–∫ –≤ –∫–æ–¥–µ: '{args.query}'...")

    if args.verbose:
        print(f"   –¢–∏–ø: {args.type}")
        print(f"   –õ–∏–º–∏—Ç: {args.limit}")

    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        results = [
            ("src/kira/core/config.py", "def load_config()", "function"),
            ("src/kira/core/host.py", "class Host:", "class"),
            ("src/kira/plugin_sdk/manifest.py", "# JSON Schema", "comment"),
        ]

        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")

        for i, (file_path, line, result_type) in enumerate(results[:args.limit]):
            print(f"   {i+1}. {file_path}:{line} ({result_type})")

        if len(results) > args.limit:
            print(f"   ... –∏ –µ—â–µ {len(results) - args.limit} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        print("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())

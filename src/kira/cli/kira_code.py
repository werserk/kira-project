#!/usr/bin/env python3
"""CLI –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

from ..core.config import load_config
from ..registry import get_plugin_registry

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è code."""


def prepare_environment(verbose: bool) -> tuple[dict | None, int]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–ª–∞–≥–∏–Ω –≤–∫–ª—é—á–µ–Ω."""

    config = load_config()

    if verbose:
        click.echo("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        click.echo(f"   Vault: {config.get('vault', {}).get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

    plugin_registry = get_plugin_registry()
    if not plugin_registry.is_plugin_enabled("kira-code"):
        click.echo("‚ùå –ü–ª–∞–≥–∏–Ω kira-code –Ω–µ –≤–∫–ª—é—á–µ–Ω")
        return None, 1

    if verbose:
        click.echo("‚úÖ –ü–ª–∞–≥–∏–Ω kira-code –≤–∫–ª—é—á–µ–Ω")

    return config, 0


@cli.command("analyze")
@click.option("--path", type=str, help="–ü—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤–µ—Å—å Vault)")
@click.option("--output", type=str, help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def analyze_command(path: str | None, output: str | None, verbose: bool) -> int:
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤ Vault."""

    try:
        config, exit_code = prepare_environment(verbose)
        if exit_code:
            return exit_code

        assert config is not None
        return handle_analyze(path, output, verbose, config)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è code –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("index")
@click.option("--rebuild", is_flag=True, help="–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å —Å –Ω—É–ª—è")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def index_command(rebuild: bool, verbose: bool) -> int:
    """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."""

    try:
        config, exit_code = prepare_environment(verbose)
        if exit_code:
            return exit_code

        assert config is not None
        return handle_index(rebuild, verbose, config)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è code –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("search")
@click.argument("query")
@click.option(
    "--type",
    "search_type",
    type=click.Choice(["function", "class", "variable", "comment", "all"]),
    default="all",
    show_default=True,
    help="–¢–∏–ø –ø–æ–∏—Å–∫–∞",
)
@click.option(
    "--limit",
    type=int,
    default=20,
    show_default=True,
    help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
)
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def search_command(query: str, search_type: str, limit: int, verbose: bool) -> int:
    """–ü–æ–∏—Å–∫ –≤ –∫–æ–¥–µ."""

    try:
        config, exit_code = prepare_environment(verbose)
        if exit_code:
            return exit_code

        assert config is not None
        return handle_search(query, search_type, limit, verbose, config)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è code –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def handle_analyze(path: str | None, output: str | None, verbose: bool, _config: dict) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã analyze."""

    click.echo("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...")

    if verbose:
        if path:
            click.echo(f"   –ü—É—Ç—å: {path}")
        else:
            click.echo("   –ü—É—Ç—å: –≤–µ—Å—å Vault")
        if output:
            click.echo(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output}")

    # –ó–∞–≥–ª—É—à–∫–∞ –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    click.echo("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    return 0


def handle_index(rebuild: bool, verbose: bool, _config: dict) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã index."""

    click.echo("üóÇÔ∏è –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–æ–¥–∞...")

    if verbose:
        click.echo(f"   –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞: {'–¥–∞' if rebuild else '–Ω–µ—Ç'}")

    # –ó–∞–≥–ª—É—à–∫–∞ –ª–æ–≥–∏–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    click.echo("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return 0


def handle_search(
    query: str,
    search_type: str,
    limit: int,
    verbose: bool,
    _config: dict,
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã search."""

    click.echo(f"üîé –ü–æ–∏—Å–∫ –≤ –∫–æ–¥–µ: {query}")

    if verbose:
        click.echo(f"   –¢–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}")
        click.echo(f"   –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {limit}")

    # –ó–∞–≥–ª—É—à–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞
    results = [
        {
            "path": "src/example.py",
            "line": 42,
            "snippet": "def example_function(): ...",
        }
    ]

    for result in results[:limit]:
        click.echo(f" - {result['path']}:{result['line']} - {result['snippet']}")

    click.echo("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
    return 0


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:  # pragma: no cover - click –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":  # pragma: no cover - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–æ–¥—É–ª—å
    sys.exit(main())

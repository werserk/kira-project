#!/usr/bin/env python3
"""
CLI –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ (extensions)
"""
import argparse
import sys
from pathlib import Path
from typing import List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

from ..core.config import load_config
from ..registry import get_adapter_registry, get_plugin_registry


def create_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è ext –∫–æ–º–∞–Ω–¥—ã"""
    parser = argparse.ArgumentParser(
        prog="kira ext",
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ (–ø–ª–∞–≥–∏–Ω—ã –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã)"
    )

    subparsers = parser.add_subparsers(
        dest='action',
        help='–î–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏',
        required=True
    )

    # –ö–æ–º–∞–Ω–¥–∞ list
    list_parser = subparsers.add_parser(
        'list',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π'
    )
    list_parser.add_argument(
        '--type',
        choices=['plugins', 'adapters', 'all'],
        default='all',
        help='–¢–∏–ø —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞'
    )
    list_parser.add_argument(
        '--status',
        choices=['enabled', 'disabled', 'all'],
        default='all',
        help='–°—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞'
    )
    list_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    # –ö–æ–º–∞–Ω–¥–∞ install
    install_parser = subparsers.add_parser(
        'install',
        help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ'
    )
    install_parser.add_argument(
        'name',
        help='–ò–º—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏'
    )
    install_parser.add_argument(
        '--source',
        type=str,
        help='–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (git URL, local path)'
    )
    install_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    # –ö–æ–º–∞–Ω–¥–∞ enable
    enable_parser = subparsers.add_parser(
        'enable',
        help='–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ'
    )
    enable_parser.add_argument(
        'name',
        help='–ò–º—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è'
    )
    enable_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    # –ö–æ–º–∞–Ω–¥–∞ disable
    disable_parser = subparsers.add_parser(
        'disable',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ'
    )
    disable_parser.add_argument(
        'name',
        help='–ò–º—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è'
    )
    disable_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    # –ö–æ–º–∞–Ω–¥–∞ info
    info_parser = subparsers.add_parser(
        'info',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏'
    )
    info_parser.add_argument(
        'name',
        help='–ò–º—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'
    )
    info_parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )

    return parser


def main(args: Optional[List[str]] = None) -> int:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ext CLI

    Args:
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ sys.argv)

    Returns:
        –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
    """
    if args is None:
        args = sys.argv[1:]

    parser = create_parser()
    parsed_args = parser.parse_args(args)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()

        if parsed_args.verbose:
            print("üîß –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if parsed_args.action == 'list':
            return handle_list(parsed_args)
        elif parsed_args.action == 'install':
            return handle_install(parsed_args, config)
        elif parsed_args.action == 'enable':
            return handle_enable(parsed_args)
        elif parsed_args.action == 'disable':
            return handle_disable(parsed_args)
        elif parsed_args.action == 'info':
            return handle_info(parsed_args)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {parsed_args.action}")
            return 1

    except FileNotFoundError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ext –∫–æ–º–∞–Ω–¥—ã: {e}")
        if parsed_args.verbose:
            import traceback
            traceback.print_exc()
        return 1


def handle_list(args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã list"""
    print("üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:")

    if args.type in ['plugins', 'all']:
        print("\nüîå –ü–ª–∞–≥–∏–Ω—ã:")
        plugin_registry = get_plugin_registry()
        plugins = plugin_registry.get_plugins()

        for plugin in plugins:
            name = plugin.get('name', 'unknown')
            enabled = plugin.get('enabled', False)
            path = plugin.get('path', 'unknown')

            if args.status == 'all' or (args.status == 'enabled' and enabled) or (args.status == 'disabled' and not enabled):
                status_icon = "‚úÖ" if enabled else "‚ùå"
                print(f"   {status_icon} {name}")
                if args.verbose:
                    print(f"      –ü—É—Ç—å: {path}")
                    print(f"      –°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")

    if args.type in ['adapters', 'all']:
        print("\nüîó –ê–¥–∞–ø—Ç–µ—Ä—ã:")
        adapter_registry = get_adapter_registry()
        adapters = adapter_registry.get_adapters()

        for adapter in adapters:
            name = adapter.get('name', 'unknown')
            enabled = adapter.get('enabled', False)
            path = adapter.get('path', 'unknown')

            if args.status == 'all' or (args.status == 'enabled' and enabled) or (args.status == 'disabled' and not enabled):
                status_icon = "‚úÖ" if enabled else "‚ùå"
                print(f"   {status_icon} {name}")
                if args.verbose:
                    print(f"      –ü—É—Ç—å: {path}")
                    print(f"      –°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")

    return 0


def handle_install(args, config) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã install"""
    print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {args.name}")

    if args.verbose:
        if args.source:
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {args.source}")
        else:
            print("   –ò—Å—Ç–æ—á–Ω–∏–∫: —Ä–µ–µ—Å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        print("   –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        print("   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ...")

        print(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {args.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
        return 1


def handle_enable(args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã enable"""
    print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {args.name}")

    try:
        # –ò—â–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä–∞—Ö
        plugin_registry = get_plugin_registry()
        adapter_registry = get_adapter_registry()

        plugin = plugin_registry.get_plugin(args.name)
        adapter = adapter_registry.get_adapter(args.name)

        if plugin:
            # –í–∫–ª—é—á–∞–µ–º –ø–ª–∞–≥–∏–Ω
            plugin['enabled'] = True
            print(f"‚úÖ –ü–ª–∞–≥–∏–Ω {args.name} –≤–∫–ª—é—á–µ–Ω")
            return 0
        elif adapter:
            # –í–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
            adapter['enabled'] = True
            print(f"‚úÖ –ê–¥–∞–ø—Ç–µ—Ä {args.name} –≤–∫–ª—é—á–µ–Ω")
            return 0
        else:
            print(f"‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {args.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 1

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
        return 1


def handle_disable(args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã disable"""
    print(f"‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {args.name}")

    try:
        # –ò—â–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä–∞—Ö
        plugin_registry = get_plugin_registry()
        adapter_registry = get_adapter_registry()

        plugin = plugin_registry.get_plugin(args.name)
        adapter = adapter_registry.get_adapter(args.name)

        if plugin:
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–≥–∏–Ω
            plugin['enabled'] = False
            print(f"‚úÖ –ü–ª–∞–≥–∏–Ω {args.name} –æ—Ç–∫–ª—é—á–µ–Ω")
            return 0
        elif adapter:
            # –û—Ç–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
            adapter['enabled'] = False
            print(f"‚úÖ –ê–¥–∞–ø—Ç–µ—Ä {args.name} –æ—Ç–∫–ª—é—á–µ–Ω")
            return 0
        else:
            print(f"‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {args.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 1

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
        return 1


def handle_info(args) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã info"""
    print(f"‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏: {args.name}")

    try:
        # –ò—â–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä–∞—Ö
        plugin_registry = get_plugin_registry()
        adapter_registry = get_adapter_registry()

        plugin = plugin_registry.get_plugin(args.name)
        adapter = adapter_registry.get_adapter(args.name)

        if plugin:
            print(f"   –¢–∏–ø: –ø–ª–∞–≥–∏–Ω")
            print(f"   –ü—É—Ç—å: {plugin.get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if plugin.get('enabled', False) else '–æ—Ç–∫–ª—é—á–µ–Ω'}")

            if args.verbose:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç –ø–ª–∞–≥–∏–Ω–∞
                plugin_path = plugin_registry.get_plugin_path(args.name)
                if plugin_path:
                    manifest_file = plugin_path / "kira-plugin.json"
                    if manifest_file.exists():
                        import json
                        with open(manifest_file, 'r') as f:
                            manifest = json.load(f)
                            print(f"   –í–µ—Ä—Å–∏—è: {manifest.get('version', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
                            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {manifest.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                            print(f"   –ò–∑–¥–∞—Ç–µ–ª—å: {manifest.get('publisher', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

            return 0
        elif adapter:
            print(f"   –¢–∏–ø: –∞–¥–∞–ø—Ç–µ—Ä")
            print(f"   –ü—É—Ç—å: {adapter.get('path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if adapter.get('enabled', False) else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
            return 0
        else:
            print(f"‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {args.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 1

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())

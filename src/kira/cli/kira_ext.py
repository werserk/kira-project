#!/usr/bin/env python3
"""CLI –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ (extensions)"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

import click

from ..core.config import load_config
from ..registry import get_adapter_registry, get_plugin_registry

CONTEXT_SETTINGS = {"help_option_names": ["-h", "--help"]}


@click.group(
    context_settings=CONTEXT_SETTINGS,
    help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ (–ø–ª–∞–≥–∏–Ω—ã –∏ –∞–¥–∞–ø—Ç–µ—Ä—ã)",
)
def cli() -> None:
    """–ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏."""


@cli.command("list")
@click.option(
    "--type",
    "extension_type",
    type=click.Choice(["plugins", "adapters", "all"]),
    default="all",
    show_default=True,
    help="–¢–∏–ø —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞",
)
@click.option(
    "--status",
    type=click.Choice(["enabled", "disabled", "all"]),
    default="all",
    show_default=True,
    help="–°—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞",
)
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def list_command(extension_type: str, status: str, verbose: bool) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π."""

    try:
        load_config()
        return handle_list(extension_type, status, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ext –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("install")
@click.argument("name")
@click.option("--source", type=str, help="–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (git URL, local path)")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def install_command(name: str, source: str | None, verbose: bool) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ."""

    try:
        config = load_config()
        return handle_install(name, source, verbose, config)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ext –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("enable")
@click.argument("name")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def enable_command(name: str, verbose: bool) -> int:
    """–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ."""

    try:
        load_config()
        return handle_enable(name, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ext –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("disable")
@click.argument("name")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def disable_command(name: str, verbose: bool) -> int:
    """–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ."""

    try:
        load_config()
        return handle_disable(name, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ext –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


@cli.command("info")
@click.argument("name")
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def info_command(name: str, verbose: bool) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏."""

    try:
        load_config()
        return handle_info(name, verbose)
    except FileNotFoundError as exc:
        click.echo(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {exc}")
        return 1
    except Exception as exc:  # pragma: no cover - –≤—ã–≤–æ–¥ —Ç—Ä–µ–π—Å–±–µ–∫–∞ –Ω–∏–∂–µ
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ext –∫–æ–º–∞–Ω–¥—ã: {exc}")
        if verbose:
            import traceback

            traceback.print_exc()
        return 1


def handle_list(extension_type: str, status: str, verbose: bool) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã list."""

    click.echo("üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:")

    if extension_type in ["plugins", "all"]:
        click.echo("\nüîå –ü–ª–∞–≥–∏–Ω—ã:")
        plugin_registry = get_plugin_registry()
        plugins = plugin_registry.get_plugins()

        for plugin in plugins:
            name = plugin.get("name", "unknown")
            enabled = plugin.get("enabled", False)
            path = plugin.get("path", "unknown")

            if status == "all" or (status == "enabled" and enabled) or (status == "disabled" and not enabled):
                status_icon = "‚úÖ" if enabled else "‚ùå"
                click.echo(f"   {status_icon} {name}")
                if verbose:
                    click.echo(f"      –ü—É—Ç—å: {path}")
                    click.echo(f"      –°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")

    if extension_type in ["adapters", "all"]:
        click.echo("\nüîó –ê–¥–∞–ø—Ç–µ—Ä—ã:")
        adapter_registry = get_adapter_registry()
        adapters = adapter_registry.get_adapters()

        for adapter in adapters:
            name = adapter.get("name", "unknown")
            enabled = adapter.get("enabled", False)
            path = adapter.get("path", "unknown")

            if status == "all" or (status == "enabled" and enabled) or (status == "disabled" and not enabled):
                status_icon = "‚úÖ" if enabled else "‚ùå"
                click.echo(f"   {status_icon} {name}")
                if verbose:
                    click.echo(f"      –ü—É—Ç—å: {path}")
                    click.echo(f"      –°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")

    return 0


def handle_install(name: str, source: str | None, verbose: bool, config: dict) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã install."""

    click.echo(f"‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è {name}...")

    if source:
        click.echo(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")

    if verbose:
        click.echo("   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    click.echo("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)")
    return 0


def handle_enable(name: str, verbose: bool) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã enable."""

    plugin_registry = get_plugin_registry()
    adapter_registry = get_adapter_registry()

    if plugin_registry.enable_plugin(name):
        click.echo(f"‚úÖ –ü–ª–∞–≥–∏–Ω {name} –≤–∫–ª—é—á–µ–Ω")
        return 0

    if adapter_registry.enable_adapter(name):
        click.echo(f"‚úÖ –ê–¥–∞–ø—Ç–µ—Ä {name} –≤–∫–ª—é—á–µ–Ω")
        return 0

    click.echo(f"‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return 1


def handle_disable(name: str, verbose: bool) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã disable."""

    plugin_registry = get_plugin_registry()
    adapter_registry = get_adapter_registry()

    if plugin_registry.disable_plugin(name):
        click.echo(f"‚úÖ –ü–ª–∞–≥–∏–Ω {name} –æ—Ç–∫–ª—é—á–µ–Ω")
        return 0

    if adapter_registry.disable_adapter(name):
        click.echo(f"‚úÖ –ê–¥–∞–ø—Ç–µ—Ä {name} –æ—Ç–∫–ª—é—á–µ–Ω")
        return 0

    click.echo(f"‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return 1


def handle_info(name: str, verbose: bool) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã info."""

    plugin_registry = get_plugin_registry()
    adapter_registry = get_adapter_registry()

    plugin = plugin_registry.get_plugin(name)
    adapter = adapter_registry.get_adapter(name)

    if plugin:
        click.echo(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ {name}:")
        click.echo(f"   –°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if plugin.get('enabled') else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        click.echo(f"   –ü—É—Ç—å: {plugin.get('path', 'unknown')}")
        return 0

    if adapter:
        click.echo(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–∞–ø—Ç–µ—Ä–µ {name}:")
        click.echo(f"   –°—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if adapter.get('enabled') else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        click.echo(f"   –ü—É—Ç—å: {adapter.get('path', 'unknown')}")
        return 0

    click.echo(f"‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return 1


def main(args: list[str] | None = None) -> int:
    if args is None:
        args = sys.argv[1:]

    try:
        return cli.main(args=list(args), standalone_mode=False)
    except SystemExit as exc:  # pragma: no cover - click –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return int(exc.code) if exc.code is not None else 0


if __name__ == "__main__":  # pragma: no cover - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –º–æ–¥—É–ª—å
    sys.exit(main())

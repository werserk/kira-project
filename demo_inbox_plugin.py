#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ Inbox Normalizer
"""
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from kira.plugin_sdk.context import PluginContext
from kira.plugins.inbox.src.kira_plugin_inbox.plugin import (
    activate,
    handle_file_dropped,
    handle_message_received,
    normalize_command,
)


def demo_plugin():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ Inbox Normalizer")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è Vault
    temp_dir = tempfile.mkdtemp()
    print(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã–π Vault: {temp_dir}")

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–ª–∞–≥–∏–Ω–∞
        config = {
            'vault': {
                'path': temp_dir
            }
        }
        context = PluginContext(config)

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        print("\nüîå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞...")
        activate(context)
        print("‚úÖ –ü–ª–∞–≥–∏–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("\nüì® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("-" * 40)

        event_data = {
            'message': '# –í–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞\n\n–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Å—Ä–æ—á–Ω–æ! #—Ä–∞–±–æ—Ç–∞ #—Å—Ä–æ—á–Ω–æ',
            'source': 'telegram'
        }

        print(f"–í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event_data['message']}")
        handle_message_received(context, event_data)

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        print("\nüìÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞")
        print("-" * 40)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        inbox_dir = Path(temp_dir) / 'inbox'
        inbox_dir.mkdir(parents=True, exist_ok=True)

        test_file = inbox_dir / 'note.txt'
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write("–ó–∞–º–µ—Ç–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞\n\n–≠—Ç–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è #–∑–∞–º–µ—Ç–∫–∞")

        print(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {test_file}")

        event_data = {
            'file_path': str(test_file)
        }

        handle_file_dropped(context, event_data)

        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –ö–æ–º–∞–Ω–¥–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        print("\n‚ö° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –ö–æ–º–∞–Ω–¥–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
        print("-" * 40)

        result = normalize_command(context, ['–í—Å—Ç—Ä–µ—á–∞', '–∑–∞–≤—Ç—Ä–∞', '–≤', '15:00', '#–≤—Å—Ç—Ä–µ—á–∞'])
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("-" * 40)

        processed_dir = Path(temp_dir) / 'processed'
        if processed_dir.exists():
            files = list(processed_dir.glob('*.md'))
            for i, file_path in enumerate(files, 1):
                print(f"{i}. {file_path.name}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    lines = content.split('\n')
                    print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {lines[0] if lines else 'N/A'}")
                    print(f"   –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print()

        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        import shutil
        shutil.rmtree(temp_dir)
        print(f"\nüßπ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")


def demo_validation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞"""
    print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞")
    print("=" * 50)

    from kira.plugin_sdk.manifest import PluginManifestValidator

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –ø–ª–∞–≥–∏–Ω–∞
    manifest_file = Path(__file__).parent / "src" / "kira" / "plugins" / "inbox" / "kira-plugin.json"

    validator = PluginManifestValidator()
    errors = validator.validate_manifest_file(str(manifest_file))

    if errors:
        print("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        for error in errors:
            print(f"  - {error}")
    else:
        print("‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –ø–ª–∞–≥–∏–Ω–∞ –≤–∞–ª–∏–¥–µ–Ω!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ
        import json
        with open(manifest_file, 'r', encoding='utf-8') as f:
            manifest = json.load(f)

        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ:")
        print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {manifest['displayName']}")
        print(f"  –í–µ—Ä—Å–∏—è: {manifest['version']}")
        print(f"  –ò–∑–¥–∞—Ç–µ–ª—å: {manifest['publisher']}")
        print(f"  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(manifest['capabilities'])}")
        print(f"  –°–æ–±—ã—Ç–∏—è: {', '.join(manifest['contributes']['events'])}")
        print(f"  –ö–æ–º–∞–Ω–¥—ã: {', '.join(manifest['contributes']['commands'])}")


if __name__ == "__main__":
    demo_plugin()
    demo_validation()
